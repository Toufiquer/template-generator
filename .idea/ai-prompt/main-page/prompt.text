here is an example of page.tsx
```
'use client'

import React, { useState } from 'react'
import { PlusIcon } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { BiRightArrowAlt } from 'react-icons/bi'

import { Button } from '@/components/ui/button'
import { FetchBaseQueryError } from '@reduxjs/toolkit/query'

import AddFilename8 from './components/Add'
import EditFilename8 from './components/Edit'
import ViewFilename8 from './components/View'
import SearchBox from './components/SearchBox'
import DeleteFilename8 from './components/Delete'
import BulkEditFilename8 from './components/BulkEdit'
import { useUsers_1_000___Store } from './store/Store'
import TooManyRequests from './components/TooManyRequest'
import BulkDeleteFilename8 from './components/BulkDelete'
import { useGetUsers_1_000___Query } from './redux/rtk-Api'
import ViewUsers_1_000___Table from './components/ViewTable'
import BulkUpdateUsers_1_000___ from './components/BulkUpdate'
import BulkDynamicUpdateUsers_1_000___ from './components/BulkDynamicUpdate'

const MainNextPage: React.FC = () => {
    const [hashSearchText, setHashSearchText] = useState('')
    const {
        toggleAddModal,
        queryPramsLimit,
        queryPramsPage,
        queryPramsQ,
        setQueryPramsPage,
        setQueryPramsQ,
    } = useUsers_1_000___Store()

    const {
        data: getResponseData,
        isSuccess,
        status: statusCode,
    } = useGetUsers_1_000___Query(
        { q: queryPramsQ, page: queryPramsPage, limit: queryPramsLimit },
        {
            selectFromResult: ({ data, isSuccess, status, error }) => ({
                data,
                isSuccess,
                status:
                    'status' in (error || {})
                        ? (error as FetchBaseQueryError).status
                        : status, // Extract HTTP status code
                error,
            }),
        }
    )

    const handleSearch = (query: string) => {
        if (query !== hashSearchText) {
            setHashSearchText(query)
            setQueryPramsPage(1)
            setQueryPramsQ(query)
        }
    }

    const modals = [
        AddFilename8,
        ViewFilename8,
        BulkDeleteFilename8,
        BulkEditFilename8,
        EditFilename8,
        DeleteFilename8,
        BulkUpdateUsers_1_000___,
        BulkDynamicUpdateUsers_1_000___,
    ]
    const router = useRouter()

    let renderUI = (
        <div className="container mx-auto p-4">
            <div className="flex flex-col md:flex-row gap-2 justify-between items-center mb-6">
                <h1 className="h2 w-full">
                    User_3_000___ Management{' '}
                    {isSuccess && (
                        <sup className="text-xs">
                            (total:{getResponseData?.data?.total || '00'})
                        </sup>
                    )}
                </h1>
                <div className="w-full flex flex-col md:flex-row gap-2 item-center justify-end">
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() =>
                            router.push('/dashboard/template-demo/ssr-view')
                        }
                    >
                        <BiRightArrowAlt className="w-4 h-4" />
                        SSR View
                    </Button>
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() =>
                            router.push('/dashboard/template-demo/client-view')
                        }
                    >
                        <BiRightArrowAlt className="w-4 h-4" />
                        Client View
                    </Button>
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() => toggleAddModal(true)}
                    >
                        <PlusIcon className="w-4 h-4" />
                        Add User_3_000___
                    </Button>
                </div>
            </div>
            <SearchBox
                onSearch={handleSearch}
                placeholder="Search here ..."
                autoFocus={false}
            />
            <ViewUsers_1_000___Table />
            {modals.map((ModalComponent, index) => (
                <ModalComponent key={index} />
            ))}
        </div>
    )

    if (statusCode === 429) {
        renderUI = <TooManyRequests />
    }

    return renderUI
}

export default MainNextPage

```

here is an example of a json file named inputJsonFile 
```
{
  "uid": "000",
  "templateName": "Basic Template",
  "schema": {
    "title": "STRING",
    "email": "EMAIL", 
    "password": "PASSWORD",
    "passcode": "PASSCODE",
    "area": "SELECT",
    "books-list": "MULTISELECT",
    "check-list": "MULTIDYNAMICSELECT",
    "sub-area": "DYNAMICSELECT",
    "products-images": "IMAGES",
    "personal-image": "IMAGE",
    "description": "DESCRIPTION",
    "age": "INTNUMBER",
    "amount": "FLOATNUMBER",
    "isActive": "BOOLEAN",
    "start-date": "DATE",
    "start-time": "TIME",
    "schedule-date": "DATERANGE",
    "schedule-time": "TIMERANGE",
    "favorite-color": "COLORPICKER",
    "number": "PHONE",
    "profile": "URL",
    "test": "RICHTEXT",
    "info": "AUTOCOMPLETE",
    "shift": "RADIOBUTTON",
    "policy": "CHECKBOX",
    "hobbys": "MULTICHECKBOX"
  },
  "namingConvention": {
    "Users_1_000___": "Posts",
    "users_2_000___": "posts",
    "User_3_000___": "Post",
    "user_4_000___": "post",
    "ISelect_6_000___": "ISelect",
    "select_5_000___": "select"
  }
}
```

here is example of out put page.tsx 
```
'use client'

import React, { useState } from 'react'
import { PlusIcon } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { BiRightArrowAlt } from 'react-icons/bi'

import { Button } from '@/components/ui/button'
import { FetchBaseQueryError } from '@reduxjs/toolkit/query'

import AddFile from './components/Add'
import EditFile from './components/Edit'
import ViewFile from './components/View'
import SearchBox from './components/SearchBox'
import DeleteFile from './components/Delete'
import BulkEditFile from './components/BulkEdit'
import { usePostsStore } from './store/Store'
import TooManyRequests from './components/TooManyRequest'
import BulkDeleteFile from './components/BulkDelete'
import { useGetPostsQuery } from './redux/rtk-Api'
import ViewPostsTable from './components/ViewTable'
import BulkUpdatePosts from './components/BulkUpdate'
import BulkDynamicUpdatePosts from './components/BulkDynamicUpdate'

const MainNextPage: React.FC = () => {
    const [hashSearchText, setHashSearchText] = useState('')
    const {
        toggleAddModal,
        queryPramsLimit,
        queryPramsPage,
        queryPramsQ,
        setQueryPramsPage,
        setQueryPramsQ,
    } = usePostsStore()

    const {
        data: getResponseData,
        isSuccess,
        status: statusCode,
    } = useGetPostsQuery(
        { q: queryPramsQ, page: queryPramsPage, limit: queryPramsLimit },
        {
            selectFromResult: ({ data, isSuccess, status, error }) => ({
                data,
                isSuccess,
                status:
                    'status' in (error || {})
                        ? (error as FetchBaseQueryError).status
                        : status, // Extract HTTP status code
                error,
            }),
        }
    )

    const handleSearch = (query: string) => {
        if (query !== hashSearchText) {
            setHashSearchText(query)
            setQueryPramsPage(1)
            setQueryPramsQ(query)
        }
    }

    const modals = [
        AddFile,
        ViewFile,
        BulkDeleteFile,
        BulkEditFile,
        EditFile,
        DeleteFile,
        BulkUpdatePosts,
        BulkDynamicUpdatePosts,
    ]
    const router = useRouter()

    let renderUI = (
        <div className="container mx-auto p-4">
            <div className="flex flex-col md:flex-row gap-2 justify-between items-center mb-6">
                <h1 className="h2 w-full">
                    Post Management{' '}
                    {isSuccess && (
                        <sup className="text-xs">
                            (total:{getResponseData?.data?.total || '00'})
                        </sup>
                    )}
                </h1>
                <div className="w-full flex flex-col md:flex-row gap-2 item-center justify-end">
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() =>
                            router.push('/dashboard/template-demo/ssr-view')
                        }
                    >
                        <BiRightArrowAlt className="w-4 h-4" />
                        SSR View
                    </Button>
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() =>
                            router.push('/dashboard/template-demo/client-view')
                        }
                    >
                        <BiRightArrowAlt className="w-4 h-4" />
                        Client View
                    </Button>
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() => toggleAddModal(true)}
                    >
                        <PlusIcon className="w-4 h-4" />
                        Add Post
                    </Button>
                </div>
            </div>
            <SearchBox
                onSearch={handleSearch}
                placeholder="Search here ..."
                autoFocus={false}
            />
            <ViewPostsTable />
            {modals.map((ModalComponent, index) => (
                <ModalComponent key={index} />
            ))}
        </div>
    )

    if (statusCode === 429) {
        renderUI = <TooManyRequests />
    }

    return renderUI
}

export default MainNextPage

```

Now write a function it return the whole page.tsx file in string.

and remember the following 

    1. some times json could looklike this one 
```
{
    "uid": "000",
    "templateName": "Basic Template",
    "schema": {
        "title1": "STRING",
        "title2": "STRING",
        "manager-md1": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        },
        "manager-md2": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        }
    },
    "namingConvention": {
        "Users_1_000___": "Posts",
        "users_2_000___": "posts",
        "User_3_000___": "Post",
        "user_4_000___": "post",
        "ISelect_6_000___": "ISelect",
        "select_5_000___": "select"
    }
}
```
    2. here is mongoose schema model 
    ```

const mySchema = new Schema({
  STRING: {
    type: String,
    required: true,
    trim: true
  },
  EMAIL: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
  },
  PASSWORD: {
    type: String,
    required: true,
    select: false // Hides this field from query results by default for security
  },
  PASSCODE: {
    type: String,
    required: true,
    select: false
  },
  SELECT: {
    type: String,
    required: true,
    enum: ['Option 1', 'Option 2', 'Option 3'] // Example options
  },
  DYNAMICSELECT: {
    type: Schema.Types.ObjectId,
    ref: 'AnotherModel' // Example of a dynamic reference to another model
  },
  IMAGES: [{
    type: String // Array of URLs to images
  }],
  IMAGE: {
    type: String // URL to a single image
  },
  DESCRIPTION: {
    type: String,
    trim: true
  },
  INTNUMBER: {
    type: Number,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  FLOATNUMBER: {
    type: Number
  },
  BOOLEAN: {
    type: Boolean,
    default: false
  },
  DATE: {
    type: Date,
    default: Date.now
  },
  TIME: {
    type: String // Can be stored as a string in 'HH:MM:SS' format
  },
  DATERANGE: {
    start: { type: Date },
    end: { type: Date }
  },
  TIMERANGE: {
    start: { type: String }, // 'HH:MM:SS'
    end: { type: String }   // 'HH:MM:SS'
  },
  COLORPICKER: {
    type: String,
    match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
  },
  PHONE: {
    type: String,
    validate: {
      validator: function(v) {
        return /\d{3}-\d{3}-\d{4}/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  URL: {
    type: String,
    trim: true
  },
  RICHTEXT: {
    type: String
  },
  AUTOCOMPLETE: {
    type: String
  },
  RADIOBUTTON: {
    type: String,
    enum: ['Choice A', 'Choice B', 'Choice C'] // Example choices
  },
  CHECKBOX: {
    type: Boolean,
    default: false
  },
  MULTICHECKBOX: [{
    type: String // An array of strings representing the selected options
  }]
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields. [8, 15]
});

    ```
    3. json key is changable or dynamic. for example {"name":"STRING", "book-name":"STRING", "note":"STRING" }
    4. please generate the file in typescript