here is an example of route.ts
```
import { handleRateLimit } from '@/app/api/utils/rate-limit'
import {
    getUsers_1_000___,
    createUser_3_000___,
    updateUser_3_000___,
    deleteUser_3_000___,
    getUser_3_000___ById,
    bulkUpdateUsers_1_000___,
    bulkDeleteUsers_1_000___,
} from './controller'

import {
    formatResponse,
    handleTokenVerify,
    IResponse,
} from '@/app/api/utils/jwt-verify'

// GET all Users_1_000___
export async function GET(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req)
    if (tokenResponse) return tokenResponse

    const id = new URL(req.url).searchParams.get('id')
    const result: IResponse = id
        ? await getUser_3_000___ById(req)
        : await getUsers_1_000___(req)
    return formatResponse(result.data, result.message, result.status)
}

// CREATE User_3_000___
export async function POST(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req);
    if (tokenResponse) return tokenResponse;

    const result = await createUser_3_000___(req)
    return formatResponse(result.data, result.message, result.status)
}

// UPDATE User_3_000___
export async function PUT(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req);
    if (tokenResponse) return tokenResponse;

    const isBulk = new URL(req.url).searchParams.get('bulk') === 'true'
    const result = isBulk
        ? await bulkUpdateUsers_1_000___(req)
        : await updateUser_3_000___(req)

    return formatResponse(result.data, result.message, result.status)
}

// DELETE User_3_000___
export async function DELETE(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req);
    if (tokenResponse) return tokenResponse;

    const isBulk = new URL(req.url).searchParams.get('bulk') === 'true'
    const result = isBulk
        ? await bulkDeleteUsers_1_000___(req)
        : await deleteUser_3_000___(req)

    return formatResponse(result.data, result.message, result.status)
}

```

here is an example of a json file named inputJsonFile 
```

{
    "uid": "000",
    "templateName": "Basic Template",
    "schema": {
        "title1": "STRING",
        "title2": "STRING",
        "manager-md1": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING"
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING"
            }
        },
        "manager-md2": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING"
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING"
            }
        }
    },
    "namingConvention": {
        "Users_1_000___": "Posts",
        "users_2_000___": "posts",
        "User_3_000___": "Post",
        "user_4_000___": "post",
        "ISelect_6_000___": "ISelect",
        "select_5_000___": "select"
    }
}

```

here is example of out put route.ts 
```


import { handleRateLimit } from '@/app/api/utils/rate-limit'
import {
    getPosts,
    createPost,
    updatePost,
    deletePost,
    getPostById,
    bulkUpdatePosts,
    bulkDeletePosts,
} from './controller'

import {
    formatResponse,
    handleTokenVerify,
    IResponse,
} from '@/app/api/utils/jwt-verify'

// GET all Posts
export async function GET(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req)
    if (tokenResponse) return tokenResponse

    const id = new URL(req.url).searchParams.get('id')
    const result: IResponse = id
        ? await getPostById(req)
        : await getPosts(req)
    return formatResponse(result.data, result.message, result.status)
}

// CREATE Post
export async function POST(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req)
    if (tokenResponse) return tokenResponse

    const result = await createPost(req)
    return formatResponse(result.data, result.message, result.status)
}

// UPDATE Post
export async function PUT(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req)
    if (tokenResponse) return tokenResponse

    const isBulk = new URL(req.url).searchParams.get('bulk') === 'true'
    const result = isBulk
        ? await bulkUpdatePosts(req)
        : await updatePost(req)

    return formatResponse(result.data, result.message, result.status)
}

// DELETE Post
export async function DELETE(req: Request) {
    const rateLimitResponse = handleRateLimit(req)
    if (rateLimitResponse) return rateLimitResponse

    const tokenResponse = handleTokenVerify(req)
    if (tokenResponse) return tokenResponse

    const isBulk = new URL(req.url).searchParams.get('bulk') === 'true'
    const result = isBulk
        ? await bulkDeletePosts(req)
        : await deletePost(req)

    return formatResponse(result.data, result.message, result.status)
}

```

Now write a function it return the whole route.ts file in string.

and remember the following 

    1. some times json could looklike this one 
```
{
    "uid": "000",
    "templateName": "Basic Template",
    "schema": {
        "title1": "STRING",
        "title2": "STRING",
        "manager-md1": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        },
        "manager-md2": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        }
    },
    "namingConvention": {
        "Users_1_000___": "Posts",
        "users_2_000___": "posts",
        "User_3_000___": "Post",
        "user_4_000___": "post",
        "ISelect_6_000___": "ISelect",
        "select_5_000___": "select"
    }
}
```
    2. here is mongoose schema model 
    ```

const mySchema = new Schema({
  STRING: {
    type: String,
    required: true,
    trim: true
  },
  EMAIL: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
  },
  PASSWORD: {
    type: String,
    required: true,
    select: false // Hides this field from query results by default for security
  },
  PASSCODE: {
    type: String,
    required: true,
    select: false
  },
  SELECT: {
    type: String,
    required: true,
    enum: ['Option 1', 'Option 2', 'Option 3'] // Example options
  },
  DYNAMICSELECT: {
    type: Schema.Types.ObjectId,
    ref: 'AnotherModel' // Example of a dynamic reference to another model
  },
  IMAGES: [{
    type: String // Array of URLs to images
  }],
  IMAGE: {
    type: String // URL to a single image
  },
  DESCRIPTION: {
    type: String,
    trim: true
  },
  INTNUMBER: {
    type: Number,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  FLOATNUMBER: {
    type: Number
  },
  BOOLEAN: {
    type: Boolean,
    default: false
  },
  DATE: {
    type: Date,
    default: Date.now
  },
  TIME: {
    type: String // Can be stored as a string in 'HH:MM:SS' format
  },
  DATERANGE: {
    start: { type: Date },
    end: { type: Date }
  },
  TIMERANGE: {
    start: { type: String }, // 'HH:MM:SS'
    end: { type: String }   // 'HH:MM:SS'
  },
  COLORPICKER: {
    type: String,
    match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
  },
  PHONE: {
    type: String,
    validate: {
      validator: function(v) {
        return /\d{3}-\d{3}-\d{4}/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  URL: {
    type: String,
    trim: true
  },
  RICHTEXT: {
    type: String
  },
  AUTOCOMPLETE: {
    type: String
  },
  RADIOBUTTON: {
    type: String,
    enum: ['Choice A', 'Choice B', 'Choice C'] // Example choices
  },
  CHECKBOX: {
    type: Boolean,
    default: false
  },
  MULTICHECKBOX: [{
    type: String // An array of strings representing the selected options
  }]
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields. [8, 15]
});

    ```
    3. json key is changable or dynamic. for example {"name":"STRING", "book-name":"STRING", "note":"STRING" }
    4. please generate the file in typescript 