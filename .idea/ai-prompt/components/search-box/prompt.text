here is an example of SearchBox.tsx
```
'use client';

import { Search, X } from 'lucide-react';
import { useState, useEffect, useRef } from 'react';

interface SearchBoxProps {
  onSearch: (query: string) => void;
  placeholder?: string;
  autoFocus?: boolean;
  debounceTime?: number;
}

export default function SearchBox({ onSearch, placeholder = 'Search...', autoFocus = false, debounceTime = 1000 }: SearchBoxProps) {
  const [query, setQuery] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Focus input on mount if autoFocus is true
  useEffect(() => {
    if (autoFocus && inputRef.current) {
      inputRef.current.focus();
    }
  }, [autoFocus]);

  // Debounce search to avoid too many requests
  useEffect(() => {
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current);
    }

    // Always trigger onSearch, even with empty query
    // This allows the parent component to clear results when input is empty
    setIsTyping(true);
    debounceTimerRef.current = setTimeout(() => {
      onSearch(query);
      setIsTyping(false);
    }, debounceTime);

    return () => {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
      }
    };
  }, [query, debounceTime, onSearch]);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
      }
      onSearch(query);
      setIsTyping(false);
    }
  };

  const handleClearSearch = () => {
    setQuery('');
    onSearch('');
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  return (
    <div className="relative w-full">
      <div className="relative flex items-center dark:bg-slate-900">
        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={e => setQuery(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          className="w-full py-2 pl-10 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-current"
        />
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <Search size={18} className="" />
        </div>

        {query.length > 0 && (
          <button onClick={handleClearSearch} className="absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer" aria-label="Clear search">
            <X size={18} className="text-gray-400 hover:text-gray-600" />
          </button>
        )}

        {isTyping && query.length > 0 && (
          <div className="absolute inset-y-0 right-8 flex items-center">
            <div className="w-4 h-4 border-2 border-t-blue-500 border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin"></div>
          </div>
        )}
      </div>
    </div>
  );
}

```

here is an example of a json file named inputJsonFile 
```
{
  "uid": "000",
  "templateName": "Basic Template",
  "schema": {
    "title": "STRING",
    "email": "EMAIL", 
    "password": "PASSWORD",
    "passcode": "PASSCODE",
    "area": "SELECT",
    "books-list": "MULTISELECT",
    "check-list": "MULTIDYNAMICSELECT",
    "sub-area": "DYNAMICSELECT",
    "products-images": "IMAGES",
    "personal-image": "IMAGE",
    "description": "DESCRIPTION",
    "age": "INTNUMBER",
    "amount": "FLOATNUMBER",
    "isActive": "BOOLEAN",
    "start-date": "DATE",
    "start-time": "TIME",
    "schedule-date": "DATERANGE",
    "schedule-time": "TIMERANGE",
    "favorite-color": "COLORPICKER",
    "number": "PHONE",
    "profile": "URL",
    "test": "RICHTEXT",
    "info": "AUTOCOMPLETE",
    "shift": "RADIOBUTTON",
    "policy": "CHECKBOX",
    "hobbys": "MULTICHECKBOX"
  },
  "namingConvention": {
    "Users_1_000___": "Posts",
    "users_2_000___": "posts",
    "User_3_000___": "Post",
    "user_4_000___": "post",
    "ISelect_6_000___": "ISelect",
    "select_5_000___": "select"
  }
}
```

here is example of out put SearchBox.tsx 
```
'use client';

import { Search, X } from 'lucide-react';
import { useState, useEffect, useRef } from 'react';

interface SearchBoxProps {
  onSearch: (query: string) => void;
  placeholder?: string;
  autoFocus?: boolean;
  debounceTime?: number;
}

export default function SearchBox({ onSearch, placeholder = 'Search...', autoFocus = false, debounceTime = 1000 }: SearchBoxProps) {
  const [query, setQuery] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Focus input on mount if autoFocus is true
  useEffect(() => {
    if (autoFocus && inputRef.current) {
      inputRef.current.focus();
    }
  }, [autoFocus]);

  // Debounce search to avoid too many requests
  useEffect(() => {
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current);
    }

    // Always trigger onSearch, even with empty query
    // This allows the parent component to clear results when input is empty
    setIsTyping(true);
    debounceTimerRef.current = setTimeout(() => {
      onSearch(query);
      setIsTyping(false);
    }, debounceTime);

    return () => {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
      }
    };
  }, [query, debounceTime, onSearch]);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
      }
      onSearch(query);
      setIsTyping(false);
    }
  };

  const handleClearSearch = () => {
    setQuery('');
    onSearch('');
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  return (
    <div className="relative w-full">
      <div className="relative flex items-center dark:bg-slate-900">
        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={e => setQuery(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          className="w-full py-2 pl-10 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-current"
        />
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <Search size={18} className="" />
        </div>

        {query.length > 0 && (
          <button onClick={handleClearSearch} className="absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer" aria-label="Clear search">
            <X size={18} className="text-gray-400 hover:text-gray-600" />
          </button>
        )}

        {isTyping && query.length > 0 && (
          <div className="absolute inset-y-0 right-8 flex items-center">
            <div className="w-4 h-4 border-2 border-t-blue-500 border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin"></div>
          </div>
        )}
      </div>
    </div>
  );
}

```

Now write a function it return the whole SearchBox.tsx file in string.

and remember the following 

    1. some times json could looklike this one 
```
{
    "uid": "000",
    "templateName": "Basic Template",
    "schema": {
        "title1": "STRING",
        "title2": "STRING",
        "manager-md1": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        },
        "manager-md2": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        }
    },
    "namingConvention": {
        "Users_1_000___": "Posts",
        "users_2_000___": "posts",
        "User_3_000___": "Post",
        "user_4_000___": "post",
        "ISelect_6_000___": "ISelect",
        "select_5_000___": "select"
    }
}
```
    2. here is mongoose schema model 
    ```

const mySchema = new Schema({
  STRING: {
    type: String,
    required: true,
    trim: true
  },
  EMAIL: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
  },
  PASSWORD: {
    type: String,
    required: true,
    select: false // Hides this field from query results by default for security
  },
  PASSCODE: {
    type: String,
    required: true,
    select: false
  },
  SELECT: {
    type: String,
    required: true,
    enum: ['Option 1', 'Option 2', 'Option 3'] // Example options
  },
  DYNAMICSELECT: {
    type: Schema.Types.ObjectId,
    ref: 'AnotherModel' // Example of a dynamic reference to another model
  },
  IMAGES: [{
    type: String // Array of URLs to images
  }],
  IMAGE: {
    type: String // URL to a single image
  },
  DESCRIPTION: {
    type: String,
    trim: true
  },
  INTNUMBER: {
    type: Number,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  FLOATNUMBER: {
    type: Number
  },
  BOOLEAN: {
    type: Boolean,
    default: false
  },
  DATE: {
    type: Date,
    default: Date.now
  },
  TIME: {
    type: String // Can be stored as a string in 'HH:MM:SS' format
  },
  DATERANGE: {
    start: { type: Date },
    end: { type: Date }
  },
  TIMERANGE: {
    start: { type: String }, // 'HH:MM:SS'
    end: { type: String }   // 'HH:MM:SS'
  },
  COLORPICKER: {
    type: String,
    match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
  },
  PHONE: {
    type: String,
    validate: {
      validator: function(v) {
        return /\d{3}-\d{3}-\d{4}/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  URL: {
    type: String,
    trim: true
  },
  RICHTEXT: {
    type: String
  },
  AUTOCOMPLETE: {
    type: String
  },
  RADIOBUTTON: {
    type: String,
    enum: ['Choice A', 'Choice B', 'Choice C'] // Example choices
  },
  CHECKBOX: {
    type: Boolean,
    default: false
  },
  MULTICHECKBOX: [{
    type: String // An array of strings representing the selected options
  }]
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields. [8, 15]
});

    ```
    3. json key is changable or dynamic. for example {"name":"STRING", "book-name":"STRING", "note":"STRING" }
    4. please generate the file in typescript