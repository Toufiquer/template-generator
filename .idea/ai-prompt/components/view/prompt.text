here is an example of View.tsx
```
import Image from 'next/image'
import { format } from 'date-fns'
import React, { useEffect } from 'react'

import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from '@/components/ui/dialog'

import { IPosts } from '../api/v1/model'
import { usePostsStore } from '../store/Store'
import { baseIPosts } from '../store/StoreConstants'
import { useGetPostsByIdQuery } from '../redux/rtk-Api'

import { ViewRichText } from './view-rich-text/ViewRichText'

const ViewNextComponents: React.FC = () => {
    const {
        isViewModalOpen,
        selectedPosts,
        toggleViewModal,
        setSelectedPosts,
    } = usePostsStore()
    const { data: PostsData, refetch } = useGetPostsByIdQuery(
        selectedPosts?._id,
        { skip: !selectedPosts?._id }
    )

    useEffect(() => {
        if (selectedPosts?._id) {
            refetch() // Fetch the latest Posts data
        }
    }, [selectedPosts?._id, refetch])

    useEffect(() => {
        if (PostsData?.data) {
            setSelectedPosts(PostsData.data) // Update selectedPosts with the latest data
        }
    }, [PostsData, setSelectedPosts])

    const formatDate = (date?: Date) =>
        date ? format(date, 'MMM dd, yyyy') : 'N/A'

    const DetailRow = ({
        label,
        value,
    }: {
        label: string
        value: React.ReactNode
    }) => (
        <div className="grid grid-cols-3 gap-2">
            <div className="font-semibold">{label}:</div>
            <div className="col-span-2">{value || 'N/A'}</div>
        </div>
    )
    const DetailRowArray = ({
        label,
        values,
    }: {
        label: string
        values: string[]
    }) => (
        <div className="grid grid-cols-3 gap-2">
            <div className="font-semibold">{label}:</div>
            <div className="col-span-2">{values?.join(', ')}</div>
        </div>
    )

    return (
        <Dialog open={isViewModalOpen} onOpenChange={toggleViewModal}>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>Posts Details</DialogTitle>
                </DialogHeader>
                {selectedPosts && (
                    <ScrollArea className="h-[400px] w-full rounded-md border p-4">
                        <div className="w-full flex flex-col">
                            <div className="grid gap-2">
                                <DetailRow
                                    label="Name"
                                    value={selectedPosts.name as string}
                                />
                                <DetailRow
                                    label="Email"
                                    value={selectedPosts.email as string}
                                />
                                <DetailRow
                                    label="Pass Code"
                                    value={selectedPosts.passCode as string}
                                />
                                <DetailRow
                                    label="Alias"
                                    value={selectedPosts.alias as string}
                                />
                                <DetailRow
                                    label="Role"
                                    value={
                                        <span
                                            className={`px-2 py-1 rounded-full text-xs font-medium ${
                                                selectedPosts.role === 'admin'
                                                    ? 'bg-amber-100 text-amber-700'
                                                    : selectedPosts.role ===
                                                        'moderator'
                                                      ? 'bg-blue-100 text-blue-700'
                                                      : 'bg-green-100 text-green-700'
                                            }`}
                                        >
                                            {selectedPosts.role as string}
                                        </span>
                                    }
                                />
                                <DetailRowArray
                                    label="Data Array"
                                    values={selectedPosts.dataArr as string[]}
                                />
                                <DetailRow
                                    label="Created At"
                                    value={formatDate(selectedPosts.createdAt)}
                                />
                                <DetailRow
                                    label="Updated At"
                                    value={formatDate(selectedPosts.updatedAt)}
                                />
                            </div>
                            <div className="w-full flex items-center justify-center mt-2 min-h-[10vh]">
                                {Array.isArray(selectedPosts.images) &&
                                selectedPosts.images?.length > 0 ? (
                                    <div className="w-full grid grid-cols-1 md:grid-cols-3 gap-1">
                                        {selectedPosts.images.map(
                                            (i, index) => (
                                                <div
                                                    key={index + i}
                                                    className={`relative w-full h-[150px] border-1 border-slate-300 shadow-xl hover:shadow-2xl cursor-pointer hover:border-slate-600 flex items-center justify-center rounded-lg overflow-hidden`}
                                                >
                                                    <Image
                                                        src={i}
                                                        fill
                                                        alt="Media"
                                                        objectFit="cover"
                                                    />
                                                </div>
                                            )
                                        )}
                                    </div>
                                ) : (
                                    <div className="flex flex-col w-full items-center justify-center">
                                        <p>Ops! there is no Image</p>
                                    </div>
                                )}
                            </div>
                            <div className="w-full m-2" />
                            <ViewRichText
                                data={selectedPosts.descriptions || ''}
                            />
                        </div>
                    </ScrollArea>
                )}
                <DialogFooter>
                    <Button
                        className="cursor-pointer border-1 border-slate-400 hover:border-slate-500"
                        onClick={() => {
                            toggleViewModal(false)
                            setSelectedPosts({
                                ...baseIPosts,
                            } as IPosts)
                        }}
                    >
                        Close
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}

export default ViewNextComponents

```

here is an example of a json file named inputJsonFile 
```
{
  "uid": "000",
  "templateName": "Basic Template",
  "schema": {
    "title": "STRING",
    "email": "EMAIL", 
    "password": "PASSWORD",
    "passcode": "PASSCODE",
    "area": "SELECT",
    "books-list": "MULTISELECT",
    "check-list": "MULTIDYNAMICSELECT",
    "sub-area": "DYNAMICSELECT",
    "products-images": "IMAGES",
    "personal-image": "IMAGE",
    "description": "DESCRIPTION",
    "age": "INTNUMBER",
    "amount": "FLOATNUMBER",
    "isActive": "BOOLEAN",
    "start-date": "DATE",
    "start-time": "TIME",
    "schedule-date": "DATERANGE",
    "schedule-time": "TIMERANGE",
    "favorite-color": "COLORPICKER",
    "number": "PHONE",
    "profile": "URL",
    "test": "RICHTEXT",
    "info": "AUTOCOMPLETE",
    "shift": "RADIOBUTTON",
    "policy": "CHECKBOX",
    "hobbys": "MULTICHECKBOX"
  },
  "namingConvention": {
    "Users_1_000___": "Posts",
    "users_2_000___": "posts",
    "User_3_000___": "Post",
    "user_4_000___": "post",
    "ISelect_6_000___": "ISelect",
    "select_5_000___": "select"
  }
}
```

here is example of out put View.tsx 
```
import Image from 'next/image'
import { format } from 'date-fns'
import React, { useEffect } from 'react'

import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from '@/components/ui/dialog'

import { IPosts, defaultPosts } from './api/v1/model'
import { usePostsStore } from '../store/Store'
import { useGetPostsByIdQuery } from '../redux/rtk-Api'

const ViewNextComponents: React.FC = () => {
    const {
        isViewModalOpen,
        selectedPosts,
        toggleViewModal,
        setSelectedPosts,
    } = usePostsStore()

    const { data: postData, refetch } = useGetPostsByIdQuery(
        selectedPosts?._id,
        { skip: !selectedPosts?._id }
    )

    useEffect(() => {
        if (selectedPosts?._id) {
            refetch()
        }
    }, [selectedPosts?._id, refetch])

    useEffect(() => {
        if (postData?.data) {
            setSelectedPosts(postData.data)
        }
    }, [postData, setSelectedPosts])

    const formatDate = (date?: Date | string) => {
        if (!date) return 'N/A'
        try {
            return format(new Date(date), 'MMM dd, yyyy')
        } catch (error) {
            return 'Invalid Date'
        }
    }

    const formatBoolean = (value?: boolean) => (value ? 'Yes' : 'No')

    const DetailRow: React.FC<{
        label: string
        value: React.ReactNode
    }> = ({ label, value }) => (
        <div className="grid grid-cols-3 gap-2 py-1 border-b border-gray-200">
            <div className="font-semibold text-sm text-gray-600">{label}:</div>
            <div className="col-span-2 text-sm">{value || 'N/A'}</div>
        </div>
    )

    const DetailRowArray: React.FC<{
        label: string
        values?: string[]
    }> = ({ label, values }) => (
        <DetailRow label={label} value={values?.join(', ') || 'N/A'} />
    )

    return (
        <Dialog open={isViewModalOpen} onOpenChange={toggleViewModal}>
            <DialogContent className="sm:max-w-[625px]">
                <DialogHeader>
                    <DialogTitle>Post Details</DialogTitle>
                </DialogHeader>
                {selectedPosts && (
                    <ScrollArea className="h-[500px] w-full rounded-md border p-4">
                        <div className="grid gap-2">
                            <DetailRow
                                label="Title"
                                value={selectedPosts.title}
                            />
                            <DetailRow
                                label="Email"
                                value={selectedPosts.email}
                            />
                            <DetailRow
                                label="Area"
                                value={selectedPosts.area}
                            />
                            <DetailRow
                                label="Books List"
                                value={selectedPosts['books-list']}
                            />
                            <DetailRow
                                label="Check List"
                                value={selectedPosts['check-list']}
                            />
                            <DetailRow
                                label="Sub Area"
                                value={selectedPosts['sub-area']}
                            />
                            <DetailRow
                                label="Description"
                                value={selectedPosts.description}
                            />
                            <DetailRow label="Age" value={selectedPosts.age} />
                            <DetailRow
                                label="Amount"
                                value={selectedPosts.amount}
                            />
                            <DetailRow
                                label="Is Active"
                                value={formatBoolean(selectedPosts.isActive)}
                            />
                            <DetailRow
                                label="Start Date"
                                value={formatDate(selectedPosts['start-date'])}
                            />
                            <DetailRow
                                label="Start Time"
                                value={selectedPosts['start-time']}
                            />
                            <DetailRow
                                label="Schedule Start"
                                value={`${formatDate(
                                    selectedPosts['schedule-date']?.start
                                )} at ${
                                    selectedPosts['schedule-time']?.start ||
                                    'N/A'
                                }`}
                            />
                            <DetailRow
                                label="Schedule End"
                                value={`${formatDate(
                                    selectedPosts['schedule-date']?.end
                                )} at ${
                                    selectedPosts['schedule-time']?.end || 'N/A'
                                }`}
                            />
                            <DetailRow
                                label="Favorite Color"
                                value={
                                    <div className="flex items-center gap-2">
                                        <span>
                                            {selectedPosts['favorite-color']}
                                        </span>
                                        <div
                                            className="w-5 h-5 rounded-full border"
                                            style={{
                                                backgroundColor:
                                                    selectedPosts[
                                                        'favorite-color'
                                                    ],
                                            }}
                                        />
                                    </div>
                                }
                            />
                            <DetailRow
                                label="Phone Number"
                                value={selectedPosts.number}
                            />
                            <DetailRow
                                label="Profile"
                                value={selectedPosts.profile}
                            />
                            <DetailRow
                                label="Test"
                                value={selectedPosts.test}
                            />
                            <DetailRow
                                label="Info"
                                value={selectedPosts.info}
                            />
                            <DetailRow
                                label="Shift"
                                value={selectedPosts.shift}
                            />
                            <DetailRow
                                label="Policy Accepted"
                                value={formatBoolean(selectedPosts.policy)}
                            />
                            <DetailRowArray
                                label="Hobbies"
                                values={selectedPosts.hobbys}
                            />
                            <DetailRow
                                label="Created At"
                                value={formatDate(selectedPosts.createdAt)}
                            />
                            <DetailRow
                                label="Updated At"
                                value={formatDate(selectedPosts.updatedAt)}
                            />
                        </div>

                        <div className="mt-4">
                            <h3 className="font-semibold text-md mb-2">
                                Personal Image
                            </h3>
                            {selectedPosts['personal-image'] ? (
                                <div className="relative w-full h-48 border rounded-lg overflow-hidden">
                                    <Image
                                        src={selectedPosts['personal-image']}
                                        layout="fill"
                                        objectFit="cover"
                                        alt="Personal Image"
                                    />
                                </div>
                            ) : (
                                <p className="text-sm text-gray-500">
                                    No personal image provided.
                                </p>
                            )}
                        </div>

                        <div className="mt-4">
                            <h3 className="font-semibold text-md mb-2">
                                Product Images
                            </h3>
                            {Array.isArray(selectedPosts['products-images']) &&
                            selectedPosts['products-images'].length > 0 ? (
                                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                                    {selectedPosts['products-images'].map(
                                        (image, index) => (
                                            <div
                                                key={`${index}-${image}`}
                                                className="relative w-full h-32 border rounded-lg overflow-hidden"
                                            >
                                                <Image
                                                    src={image}
                                                    layout="fill"
                                                    objectFit="cover"
                                                    alt={`Product Image ${index + 1}`}
                                                />
                                            </div>
                                        )
                                    )}
                                </div>
                            ) : (
                                <p className="text-sm text-gray-500">
                                    No product images provided.
                                </p>
                            )}
                        </div>
                    </ScrollArea>
                )}
                <DialogFooter>
                    <Button
                        variant="outline"
                        className="border-slate-500 hover:border-slate-600"
                        onClick={() => {
                            toggleViewModal(false)
                            setSelectedPosts(defaultPosts as IPosts)
                        }}
                    >
                        Close
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}

export default ViewNextComponents

```

Now write a function it return the whole View.tsx file in string.

and remember the following 

    1. some times json could looklike this one 
```
{
    "uid": "000",
    "templateName": "Basic Template",
    "schema": {
        "title1": "STRING",
        "title2": "STRING",
        "manager-md1": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        },
        "manager-md2": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        }
    },
    "namingConvention": {
        "Users_1_000___": "Posts",
        "users_2_000___": "posts",
        "User_3_000___": "Post",
        "user_4_000___": "post",
        "ISelect_6_000___": "ISelect",
        "select_5_000___": "select"
    }
}
```
    2. here is mongoose schema model 
    ```

const mySchema = new Schema({
  STRING: {
    type: String,
    required: true,
    trim: true
  },
  EMAIL: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
  },
  PASSWORD: {
    type: String,
    required: true,
    select: false // Hides this field from query results by default for security
  },
  PASSCODE: {
    type: String,
    required: true,
    select: false
  },
  SELECT: {
    type: String,
    required: true,
    enum: ['Option 1', 'Option 2', 'Option 3'] // Example options
  },
  DYNAMICSELECT: {
    type: Schema.Types.ObjectId,
    ref: 'AnotherModel' // Example of a dynamic reference to another model
  },
  IMAGES: [{
    type: String // Array of URLs to images
  }],
  IMAGE: {
    type: String // URL to a single image
  },
  DESCRIPTION: {
    type: String,
    trim: true
  },
  INTNUMBER: {
    type: Number,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  FLOATNUMBER: {
    type: Number
  },
  BOOLEAN: {
    type: Boolean,
    default: false
  },
  DATE: {
    type: Date,
    default: Date.now
  },
  TIME: {
    type: String // Can be stored as a string in 'HH:MM:SS' format
  },
  DATERANGE: {
    start: { type: Date },
    end: { type: Date }
  },
  TIMERANGE: {
    start: { type: String }, // 'HH:MM:SS'
    end: { type: String }   // 'HH:MM:SS'
  },
  COLORPICKER: {
    type: String,
    match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
  },
  PHONE: {
    type: String,
    validate: {
      validator: function(v) {
        return /\d{3}-\d{3}-\d{4}/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  URL: {
    type: String,
    trim: true
  },
  RICHTEXT: {
    type: String
  },
  AUTOCOMPLETE: {
    type: String
  },
  RADIOBUTTON: {
    type: String,
    enum: ['Choice A', 'Choice B', 'Choice C'] // Example choices
  },
  CHECKBOX: {
    type: Boolean,
    default: false
  },
  MULTICHECKBOX: [{
    type: String // An array of strings representing the selected options
  }]
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields. [8, 15]
});

    ```
    3. json key is changable or dynamic. for example {"name":"STRING", "book-name":"STRING", "note":"STRING" }
    4. please generate the file in typescript