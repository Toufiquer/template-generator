here is an example of ImageDialog.tsx
```
import Image from 'next/image'
import { toast } from 'react-toastify'
import { useEffect, useState } from 'react'

import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'

const ImageDialog = ({
    handleAddImages,
}: {
    handleAddImages: (newImage: string) => void
}) => {
    const [allImages, setAllImages] = useState<string[]>([])
    const [loading, setLoading] = useState(false)
    const [showUploadModal, setShowUploadModal] = useState(false)
    const [selectImg, setSelectImg] = useState('')
    const handleImageUpload = async (
        e: React.ChangeEvent<HTMLInputElement>
    ) => {
        const file = e.target.files?.[0]
        if (!file) return

        try {
            setLoading(true)
            const formData = new FormData()
            formData.append('image', file)

            const response = await fetch(
                `https://api.imgbb.com/1/upload?key=${process.env.NEXT_PUBLIC_IMGBB_API_KEY}`,
                {
                    method: 'POST',
                    body: formData,
                    // mode: 'no-cors',
                    // headers: {
                    //   'Content-Type': 'application/image',
                    // },
                }
            )

            const data = await response.json()
            if (data.success) {
                // Save image data to our server
                const saveResponse = await fetch('/api/media', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        delete_url: data.data.delete_url,
                        url: data.data.url,
                        display_url: data.data.display_url,
                    }),
                })

                if (!saveResponse.ok) {
                    throw new Error('Error! Cannot save the image.')
                }
                setAllImages([data?.data?.url, ...allImages])
                toast.success('Image uploaded successfully!')
                setShowUploadModal(false)
            } else {
                toast.error('Error! Cannot upload the image')
            }
        } catch (error) {
            console.error('Error uploading image:', error)
            toast.error('Error! Cannot upload the image')
        } finally {
            setLoading(false)
        }
    }
    useEffect(() => {
        const fetchImages = async () => {
            const response = await fetch('/api/media')
            const data = await response.json()

            const lstImage: string[] = data?.data.map(
                (i: { url: string }) => i.url
            )
            setAllImages(lstImage)
        }
        fetchImages()
    }, [])
    const handleSelect = (id: string) => {
        if (selectImg === id) {
            setSelectImg('')
        } else {
            handleAddImages(id)
            setSelectImg(id)
        }
    }
    return (
        <ScrollArea className="w-full h-[60vh] p-1 pr-2 border-1 border-slate-500">
            <main className="w-full min-h-[60vh] flex flex-col">
                <div className="flex justify-between items-center border-b border-slate-200 mb-2">
                    <h1 className="text-xl w-full">
                        Not here! Upload a new one
                    </h1>
                    <Button
                        className="border-slate-500 hover:border-slate-600 border-1 cursor-pointer"
                        onClick={() => setShowUploadModal(true)}
                    >
                        Upload
                    </Button>
                </div>
                {showUploadModal ? (
                    <div className="fixed inset-0 backdrop-blur-sm bg-opacity-50 flex items-center justify-center">
                        <div className="bg-white p-4 rounded-lg w-96">
                            <h3 className="text-lg font-semibold mb-4">
                                Upload
                            </h3>
                            <Input
                                type="file"
                                accept="image/*"
                                onChange={handleImageUpload}
                                disabled={loading}
                            />
                            {loading && <p className="mt-2">Uploading...</p>}
                            <div className="flex justify-end gap-2 mt-4">
                                <Button
                                    className="cursor-pointer"
                                    variant="outline"
                                    onClick={() => setShowUploadModal(false)}
                                >
                                    Cancel
                                </Button>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div>
                        {allImages.length > 0 ? (
                            <div className="w-full grid grid-cols-1 md:grid-cols-3 gap-1">
                                {allImages.map((i, index) => (
                                    <div
                                        onClick={() => handleSelect(i)}
                                        key={index + i}
                                        className={`relative w-full h-[150px] border-1 border-slate-300 shadow-xl hover:shadow-2xl cursor-pointer hover:border-slate-600 flex items-center justify-center rounded-lg overflow-hidden`}
                                    >
                                        <Image
                                            src={i}
                                            fill
                                            alt="Media"
                                            objectFit="cover"
                                        />
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="flex flex-col w-full items-center justify-center mt-3">
                                <p>Ops! there is no Image</p>
                            </div>
                        )}
                    </div>
                )}
            </main>
        </ScrollArea>
    )
}
export default ImageDialog

```

here is an example of a json file named inputJsonFile 
```
{
  "uid": "000",
  "templateName": "Basic Template",
  "schema": {
    "title": "STRING",
    "email": "EMAIL", 
    "password": "PASSWORD",
    "passcode": "PASSCODE",
    "area": "SELECT",
    "books-list": "MULTISELECT",
    "check-list": "MULTIDYNAMICSELECT",
    "sub-area": "DYNAMICSELECT",
    "products-images": "IMAGES",
    "personal-image": "IMAGE",
    "description": "DESCRIPTION",
    "age": "INTNUMBER",
    "amount": "FLOATNUMBER",
    "isActive": "BOOLEAN",
    "start-date": "DATE",
    "start-time": "TIME",
    "schedule-date": "DATERANGE",
    "schedule-time": "TIMERANGE",
    "favorite-color": "COLORPICKER",
    "number": "PHONE",
    "profile": "URL",
    "test": "RICHTEXT",
    "info": "AUTOCOMPLETE",
    "shift": "RADIOBUTTON",
    "policy": "CHECKBOX",
    "hobbys": "MULTICHECKBOX"
  },
  "namingConvention": {
    "Users_1_000___": "Posts",
    "users_2_000___": "posts",
    "User_3_000___": "Post",
    "user_4_000___": "post",
    "ISelect_6_000___": "ISelect",
    "select_5_000___": "select"
  }
}
```

here is example of out put ImageDialog.tsx 
```
import Image from 'next/image'
import { toast } from 'react-toastify'
import { useEffect, useState } from 'react'

import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'

const ImageDialog = ({
    handleAddImages,
}: {
    handleAddImages: (newImage: string) => void
}) => {
    const [allImages, setAllImages] = useState<string[]>([])
    const [loading, setLoading] = useState(false)
    const [showUploadModal, setShowUploadModal] = useState(false)
    const [selectImg, setSelectImg] = useState('')
    const handleImageUpload = async (
        e: React.ChangeEvent<HTMLInputElement>
    ) => {
        const file = e.target.files?.[0]
        if (!file) return

        try {
            setLoading(true)
            const formData = new FormData()
            formData.append('image', file)

            const response = await fetch(
                `https://api.imgbb.com/1/upload?key=${process.env.NEXT_PUBLIC_IMGBB_API_KEY}`,
                {
                    method: 'POST',
                    body: formData,
                    // mode: 'no-cors',
                    // headers: {
                    //   'Content-Type': 'application/image',
                    // },
                }
            )

            const data = await response.json()
            if (data.success) {
                // Save image data to our server
                const saveResponse = await fetch('/api/media', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        delete_url: data.data.delete_url,
                        url: data.data.url,
                        display_url: data.data.display_url,
                    }),
                })

                if (!saveResponse.ok) {
                    throw new Error('Error! Cannot save the image.')
                }
                setAllImages([data?.data?.url, ...allImages])
                toast.success('Image uploaded successfully!')
                setShowUploadModal(false)
            } else {
                toast.error('Error! Cannot upload the image')
            }
        } catch (error) {
            console.error('Error uploading image:', error)
            toast.error('Error! Cannot upload the image')
        } finally {
            setLoading(false)
        }
    }
    useEffect(() => {
        const fetchImages = async () => {
            const response = await fetch('/api/media')
            const data = await response.json()

            const lstImage: string[] = data?.data.map(
                (i: { url: string }) => i.url
            )
            setAllImages(lstImage)
        }
        fetchImages()
    }, [])
    const handleSelect = (id: string) => {
        if (selectImg === id) {
            setSelectImg('')
        } else {
            handleAddImages(id)
            setSelectImg(id)
        }
    }
    return (
        <ScrollArea className="w-full h-[60vh] p-1 pr-2 border-1 border-slate-500">
            <main className="w-full min-h-[60vh] flex flex-col">
                <div className="flex justify-between items-center border-b border-slate-200 mb-2">
                    <h1 className="text-xl w-full">
                        Not here! Upload a new one
                    </h1>
                    <Button
                        className="border-slate-500 hover:border-slate-600 border-1 cursor-pointer"
                        onClick={() => setShowUploadModal(true)}
                    >
                        Upload
                    </Button>
                </div>
                {showUploadModal ? (
                    <div className="fixed inset-0 backdrop-blur-sm bg-opacity-50 flex items-center justify-center">
                        <div className="bg-white p-4 rounded-lg w-96">
                            <h3 className="text-lg font-semibold mb-4">
                                Upload
                            </h3>
                            <Input
                                type="file"
                                accept="image/*"
                                onChange={handleImageUpload}
                                disabled={loading}
                            />
                            {loading && <p className="mt-2">Uploading...</p>}
                            <div className="flex justify-end gap-2 mt-4">
                                <Button
                                    className="cursor-pointer"
                                    variant="outline"
                                    onClick={() => setShowUploadModal(false)}
                                >
                                    Cancel
                                </Button>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div>
                        {allImages.length > 0 ? (
                            <div className="w-full grid grid-cols-1 md:grid-cols-3 gap-1">
                                {allImages.map((i, index) => (
                                    <div
                                        onClick={() => handleSelect(i)}
                                        key={index + i}
                                        className={`relative w-full h-[150px] border-1 border-slate-300 shadow-xl hover:shadow-2xl cursor-pointer hover:border-slate-600 flex items-center justify-center rounded-lg overflow-hidden`}
                                    >
                                        <Image
                                            src={i}
                                            fill
                                            alt="Media"
                                            objectFit="cover"
                                        />
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="flex flex-col w-full items-center justify-center mt-3">
                                <p>Ops! there is no Image</p>
                            </div>
                        )}
                    </div>
                )}
            </main>
        </ScrollArea>
    )
}
export default ImageDialog

```

Now write a function it return the whole ImageDialog.tsx file in string.

and remember the following 

    1. some times json could looklike this one 
```
{
    "uid": "000",
    "templateName": "Basic Template",
    "schema": {
        "title1": "STRING",
        "title2": "STRING",
        "manager-md1": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        },
        "manager-md2": {
            "title1": "STRING",
            "title2": "STRING",
            "chief-executive-officer-ceo1": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            },
            "chief-executive-officer-ceo2": {
                "title1": "STRING",
                "title2": "STRING",
                "executive-officer-eo1": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                },
                "executive-officer-eo2": {
                    "title1": "STRING",
                    "title2": "STRING",
                    "worker1": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    },
                    "worker2": {
                        "title1": "STRING",
                        "title2": "STRING",
                        "loworker1": {
                            "title1": "STRING",
                            "title2": "STRING"
                        },
                        "loworker2": {
                            "title1": "STRING",
                            "title2": "STRING"
                        }
                    }
                }
            }
        }
    },
    "namingConvention": {
        "Users_1_000___": "Posts",
        "users_2_000___": "posts",
        "User_3_000___": "Post",
        "user_4_000___": "post",
        "ISelect_6_000___": "ISelect",
        "select_5_000___": "select"
    }
}
```
    2. here is mongoose schema model 
    ```

const mySchema = new Schema({
  STRING: {
    type: String,
    required: true,
    trim: true
  },
  EMAIL: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
  },
  PASSWORD: {
    type: String,
    required: true,
    select: false // Hides this field from query results by default for security
  },
  PASSCODE: {
    type: String,
    required: true,
    select: false
  },
  SELECT: {
    type: String,
    required: true,
    enum: ['Option 1', 'Option 2', 'Option 3'] // Example options
  },
  DYNAMICSELECT: {
    type: Schema.Types.ObjectId,
    ref: 'AnotherModel' // Example of a dynamic reference to another model
  },
  IMAGES: [{
    type: String // Array of URLs to images
  }],
  IMAGE: {
    type: String // URL to a single image
  },
  DESCRIPTION: {
    type: String,
    trim: true
  },
  INTNUMBER: {
    type: Number,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  FLOATNUMBER: {
    type: Number
  },
  BOOLEAN: {
    type: Boolean,
    default: false
  },
  DATE: {
    type: Date,
    default: Date.now
  },
  TIME: {
    type: String // Can be stored as a string in 'HH:MM:SS' format
  },
  DATERANGE: {
    start: { type: Date },
    end: { type: Date }
  },
  TIMERANGE: {
    start: { type: String }, // 'HH:MM:SS'
    end: { type: String }   // 'HH:MM:SS'
  },
  COLORPICKER: {
    type: String,
    match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
  },
  PHONE: {
    type: String,
    validate: {
      validator: function(v) {
        return /\d{3}-\d{3}-\d{4}/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  URL: {
    type: String,
    trim: true
  },
  RICHTEXT: {
    type: String
  },
  AUTOCOMPLETE: {
    type: String
  },
  RADIOBUTTON: {
    type: String,
    enum: ['Choice A', 'Choice B', 'Choice C'] // Example choices
  },
  CHECKBOX: {
    type: Boolean,
    default: false
  },
  MULTICHECKBOX: [{
    type: String // An array of strings representing the selected options
  }]
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields. [8, 15]
});

    ```
    3. json key is changable or dynamic. for example {"name":"STRING", "book-name":"STRING", "note":"STRING" }
    4. please generate the file in typescript