Here is an example of Json file 

{
  "uid": "000",
  "templateName": "Basic Template",
  "schema": {
    "title": "STRING"
  },
  "namingConvention": {
    "Users_1_000___": "Posts",
    "users_2_000___": "posts",
    "User_3_000___": "Post",
    "user_4_000___": "post",
    "ISelect_6_000___": "ISelect",
    "select_5_000___": "select"
  }
}

From this json this application can generate those file with features I write below,
1. api 
2. dashboard 
    a. redux
    b. main page with a table with CURD operation
    c. zustand store for manage state
    d. component for CURD operation
3. a client component [that component render in client]
4. a ssr [that render on server]

5. in a single component we use those data type
  1. STRING - 
  2. EMAIL - 
  3. PASSWORD -
  4. PASSCODE -
  5. SELECT - 
  6. DYNAMICSELECT - 
  7. IMAGES - 
  8. IMAGE  - 
  9. DESCRIPTION - 
  10. INTNUMBER - 
  11. FLOATNUMBER - 
  12. BOOLEAN - 
  13. DATE  - 
  14. TIME - 
  15. DATERANGE - 
  16. TIMERANGE - 
  17. COLOEPICKER - 
  18. PHONE - 
  19. URL - 
  20. RICHTEXT - 
  21. AUTOCOMPLETE - 
  22. RADIOBUTTON - 
  23. CHECKBOX - 
  24. MULTICHECKBOX - 
  25. MULTISELECT - 
  26. MULTIDYNAMICSELECT - 


all json example
-----------------------------------------------------
  "title" : "STRING",
  "email" : "EMAIL",
  "password" : "PASSWOR",
  "passcode" : "PASSCOD",
  "area" : "SELECT",
  "sub-area" : "DYNAMICSELECT",
  "products-images" : "IMAGES",
  "parsonal-image" : "IMAGE ",
  "description" : "DESCRIPTION",
  "age" : "INTNUMBER",
  "amount" : "FLOATNUMBER",
  "isActive" : "BOOLEAN",
  "start-date" : "DATE ",
  "start-time" : "TIME",
  "schedule-date" : "DATERANGE",
  "schedule-time" : "TIMERANGE",
  "favorite-color" : "COLOEPICKER",
  "number" : "PHONE",
  "profile" : "URL",
  "test" : "RICHTEXT",
  "info" : "AUTOCOMPLETE",
  "shift" : "RADIOBUTTON",
  "policy" : "CHECKBOX",
  "hobbys" : "MULTICHECKBOX",
  "books-list": "MULTISELECT",
  "check-list": "MULTIDYNAMICSELECT"


Databasetype and mongooseSchema Schema
-----------------------------------------------------
  STRING : String,
  EMAIL : String,
  PASSWOR : String,
  PASSCOD : String,
  SELECT : String,
  MULTISELECT : String[],
  DYNAMICSELECT : String,
  MULTIDYNAMICSELECT : String[],
  IMAGES : String,
  IMAGE  : String,
  DESCRIPTION : String,
  INTNUMBER : Number,
  FLOATNUMBER : Number,
  BOOLEAN : boolean,
  DATE  : Date,
  TIME : String,
  DATERANGE : {start: String, end: String},
  TIMERANGE : {start: String, end: String},
  COLOEPICKER : String,
  PHONE : String,
  URL : String,
  RICHTEXT : String,
  AUTOCOMPLETE : String,
  RADIOBUTTON : Boolean,
  CHECKBOX : String,
  MULTICHECKBOX : String,



const mySchema = new Schema({
  STRING: {
    type: String,
    required: true,
    trim: true
  },
  EMAIL: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
  },
  PASSWORD: {
    type: String,
    required: true,
    select: false // Hides this field from query results by default for security
  },
  PASSCODE: {
    type: String,
    required: true,
    select: false
  },
  SELECT: {
    type: String,
    required: true,
    enum: ['Option 1', 'Option 2', 'Option 3'] // Example options
  },
  DYNAMICSELECT: {
    type: Schema.Types.ObjectId,
    ref: 'AnotherModel' // Example of a dynamic reference to another model
  },
  IMAGES: [{
    type: String // Array of URLs to images
  }],
  IMAGE: {
    type: String // URL to a single image
  },
  DESCRIPTION: {
    type: String,
    trim: true
  },
  INTNUMBER: {
    type: Number,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  FLOATNUMBER: {
    type: Number
  },
  BOOLEAN: {
    type: Boolean,
    default: false
  },
  DATE: {
    type: Date,
    default: Date.now
  },
  TIME: {
    type: String // Can be stored as a string in 'HH:MM:SS' format
  },
  DATERANGE: {
    start: { type: Date },
    end: { type: Date }
  },
  TIMERANGE: {
    start: { type: String }, // 'HH:MM:SS'
    end: { type: String }   // 'HH:MM:SS'
  },
  COLORPICKER: {
    type: String,
    match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
  },
  PHONE: {
    type: String,
    validate: {
      validator: function(v) {
        return /\d{3}-\d{3}-\d{4}/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  URL: {
    type: String,
    trim: true
  },
  RICHTEXT: {
    type: String
  },
  AUTOCOMPLETE: {
    type: String
  },
  RADIOBUTTON: {
    type: String,
    enum: ['Choice A', 'Choice B', 'Choice C'] // Example choices
  },
  CHECKBOX: {
    type: Boolean,
    default: false
  },
  MULTICHECKBOX: [{
    type: String // An array of strings representing the selected options
  }]
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields. [8, 15]
});
