Act as a seniour webApplication developwer in NextJs with Typescript.

look at the Add.tsx code 
````
/**
 * Generates the content for a dynamic Add.tsx component file based on a JSON schema.
 *
 * @param {InputJsonFile} inputJsonFile The JSON object with schema and naming conventions.
 * @returns {string} The complete Add.tsx file content as a string.
 */
export const generateAddComponentFile = (inputJsonFile: string): string => {
    const { schema, namingConvention } = JSON.parse(inputJsonFile) || {}

    const pluralPascalCase = namingConvention.Users_1_000___ // e.g., "Posts"
    const singularPascalCase = namingConvention.User_3_000___ // e.g., "Post"
    const pluralLowerCase = namingConvention.users_2_000___ // e.g., "posts"
    const interfaceName = `I${pluralPascalCase}` // e.g., "IPosts"
    const defaultInstanceName = `default${pluralPascalCase}` // e.g., "defaultPosts"

    /**
     * Generates the JSX for a specific form field based on its schema type.
     */
    const generateFormFieldJsx = (key: string, type: string): string => {
        const label = key
            .replace(/-/g, ' ')
            .replace(/\b\w/g, (l) => l.toUpperCase())

        switch (type.toUpperCase()) {
            case 'STRING':
            case 'URL':
            case 'AUTOCOMPLETE':
            case 'DYNAMICSELECT': // Handled as simple text for now
            case 'MULTISELECT':
            case 'MULTIDYNAMICSELECT':
            case 'IMAGE':
            case 'PHONE':
            case 'RICHTEXT':
            case 'TEST':
            case 'INFO':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`
            case 'EMAIL':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="email"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`

            case 'PASSWORD':
            case 'PASSCODE':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="password"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`

            case 'DESCRIPTION':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="textarea"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`

            case 'INTNUMBER':
            case 'FLOATNUMBER':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="number"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`

            case 'BOOLEAN':
            case 'CHECKBOX':
                return `
                        <div className="grid grid-cols-4 items-center gap-4 pr-1">
                            <Label htmlFor="${key}" className="text-right">
                                ${label}
                            </Label>
                            <Checkbox
                                id="${key}"
                                name="${key}"
                                checked={new${singularPascalCase}['${key}']}
                                onCheckedChange={(checked) => handleCheckboxChange('${key}', !!checked)}
                            />
                        </div>`

            case 'SELECT':
            case 'RADIOBUTTON':
                return `
                        <div className="grid grid-cols-4 items-center gap-4 pr-1">
                            <Label htmlFor="${key}" className="text-right">
                                ${label}
                            </Label>
                            <Select
                                onValueChange={(value) => handleSelectChange('${key}', value)}
                                value={new${singularPascalCase}['${key}']}
                            >
                                <SelectTrigger className="col-span-3">
                                    <SelectValue placeholder="Select an option" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="Option 1">Option 1</SelectItem>
                                    <SelectItem value="Option 2">Option 2</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>`

            case 'IMAGES':
            case 'MULTICHECKBOX':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label} (comma separated)"
                            value={(new${singularPascalCase}['${key}'] as string[]).join(',')}
                            onChange={(e) => handleArrayChange('${key}', e.target.value)}
                        />`

            case 'DATE':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="date"
                            value={new${singularPascalCase}['${key}'] ? new Date(new${singularPascalCase}['${key}']).toISOString().split('T')[0] : ''}
                            onChange={(e) => handleDateChange(e, '${key}')}
                        />`
            case 'TIME':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="time"
                            value={new${singularPascalCase}['${key}']}
                            onChange={(e) => handleTimeChange(e, '${key}')}
                        />`

            case 'DATERANGE':
                return `
                        <div className="grid grid-cols-4 items-center gap-4 pr-1">
                            <Label htmlFor="${key}-start" className="text-right">${label} Start</Label>
                            <Input
                                id="${key}-start"
                                name="${key}-start"
                                type="date"
                                value={new${singularPascalCase}['${key}'].start ? new Date(new${singularPascalCase}['${key}'].start).toISOString().split('T')[0] : ''}
                                onChange={(e) => handleDateChange(e, '${key}', 'start')}
                                className="col-span-3"
                            />
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4 pr-1">
                            <Label htmlFor="${key}-end" className="text-right">${label} End</Label>
                            <Input
                                id="${key}-end"
                                name="${key}-end"
                                type="date"
                                value={new${singularPascalCase}['${key}'].end ? new Date(new${singularPascalCase}['${key}'].end).toISOString().split('T')[0] : ''}
                                onChange={(e) => handleDateChange(e, '${key}', 'end')}
                                className="col-span-3"
                            />
                        </div>`
            case 'TIMERANGE':
                return `
                        <div className="grid grid-cols-4 items-center gap-4 pr-1">
                            <Label htmlFor="${key}-start" className="text-right">${label} Start</Label>
                            <Input
                                id="${key}-start"
                                name="${key}-start"
                                type="time"
                                value={new${singularPascalCase}['${key}'].start}
                                onChange={(e) => handleTimeChange(e, '${key}', 'start')}
                                className="col-span-3"
                            />
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4 pr-1">
                            <Label htmlFor="${key}-end" className="text-right">${label} End</Label>
                            <Input
                                id="${key}-end"
                                name="${key}-end"
                                type="time"
                                value={new${singularPascalCase}['${key}'].end}
                                onChange={(e) => handleTimeChange(e, '${key}', 'end')}
                                className="col-span-3"
                            />
                        </div>`

            case 'COLORPICKER':
                return `
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            type="color"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`
            default:
                return `
                        {/* Field type '${type}' is not supported yet. */}
                        <InputField
                            id="${key}"
                            name="${key}"
                            label="${label}"
                            value={new${singularPascalCase}['${key}']}
                            onChange={handleInputChange}
                        />`
        }
    }

    const formFieldsJsx = Object.entries(schema)
        .map(([key, value]) => generateFormFieldJsx(key, value as string))
        .join('')

    return `import { useState } from 'react'

import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import { Textarea } from '@/components/ui/textarea'
import { ScrollArea } from '@/components/ui/scroll-area'
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select'
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from '@/components/ui/dialog'

import { use${pluralPascalCase}Store } from '../store/store'
import { useAdd${pluralPascalCase}Mutation } from '../redux/rtk-api'
import { ${interfaceName}, ${defaultInstanceName} } from '@/app/generate/${pluralLowerCase}/all/store/data/data'
import { formatDuplicateKeyError, handleError, handleSuccess, isApiErrorResponse } from './utils'

const InputField: React.FC<{
    id: string
    name: string
    label: string
    type?: string
    value: string | number
    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void
}> = ({ id, name, label, type = 'text', value, onChange }) => (
    <div className="grid grid-cols-4 items-center gap-4 pr-1">
        <Label htmlFor={id} className="text-right">
            {label}
        </Label>
        {type === 'textarea' ? (
            <Textarea
                id={id}
                name={name}
                value={value as string}
                onChange={onChange}
                className="col-span-3"
            />
        ) : (
            <Input
                id={id}
                name={name}
                type={type}
                value={value}
                onChange={onChange}
                className="col-span-3"
            />
        )}
    </div>
)

const AddNextComponents: React.FC = () => {
    const { toggleAddModal, isAddModalOpen, set${pluralPascalCase} } = use${pluralPascalCase}Store()
    const [add${pluralPascalCase}, { isLoading }] = useAdd${pluralPascalCase}Mutation()
    const [new${singularPascalCase}, setNew${singularPascalCase}] = useState<${interfaceName}>(${defaultInstanceName})

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setNew${singularPascalCase}({ ...new${singularPascalCase}, [name]: value })
    }

    const handleCheckboxChange = (name: string, checked: boolean) => {
        setNew${singularPascalCase}({ ...new${singularPascalCase}, [name]: checked })
    }

    const handleSelectChange = (name: string, value: string) => {
        setNew${singularPascalCase}({ ...new${singularPascalCase}, [name]: value })
    }

    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>, field: string, nestedField?: 'start' | 'end') => {
        const { value } = e.target
        if (nestedField) {
            setNew${singularPascalCase}({
                ...new${singularPascalCase},
                [field]: {
                    ...(new${singularPascalCase}[field as keyof ${interfaceName}] as object),
                    [nestedField]: new Date(value),
                },
            })
        } else {
            setNew${singularPascalCase}({ ...new${singularPascalCase}, [field]: new Date(value) })
        }
    }

    const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>, field: string, nestedField?: 'start' | 'end') => {
        const { value } = e.target
        if (nestedField) {
            setNew${singularPascalCase}({
                ...new${singularPascalCase},
                [field]: {
                    ...(new${singularPascalCase}[field as keyof ${interfaceName}] as object),
                    [nestedField]: value,
                },
            })
        } else {
            setNew${singularPascalCase}({ ...new${singularPascalCase}, [field]: value })
        }
    }

    const handleArrayChange = (name: string, value: string) => {
        setNew${singularPascalCase}({ ...new${singularPascalCase}, [name]: value.split(',').map(item => item.trim()) })
    }

    const handleAdd${singularPascalCase} = async () => {
        try {
            const { _id, ...update${pluralPascalCase} } = new${singularPascalCase}
            console.log('_id', _id)
            const added${singularPascalCase} = await add${pluralPascalCase}(update${pluralPascalCase}).unwrap()
            set${pluralPascalCase}([added${singularPascalCase}])
            toggleAddModal(false)
            setNew${singularPascalCase}(${defaultInstanceName})
            handleSuccess('Added Successful')
        } catch (error: unknown) {
            console.error(error)
            let errMessage: string = 'An unknown error occurred.'
            if (isApiErrorResponse(error)) {
                errMessage = formatDuplicateKeyError(error.data.message) || 'API error'
            } else if (error instanceof Error) {
                errMessage = error.message
            }
            handleError(errMessage)
        }
    }

    return (
        <Dialog open={isAddModalOpen} onOpenChange={toggleAddModal}>
            <DialogContent className="sm:max-w-[625px]">
                <DialogHeader>
                    <DialogTitle>Add New ${singularPascalCase}</DialogTitle>
                </DialogHeader>

                <ScrollArea className="h-[500px] w-full rounded-md border p-4">
                    <div className="grid gap-4 py-4">
                        ${formFieldsJsx}
                    </div>
                </ScrollArea>

                <DialogFooter>
                    <Button
                        variant="outline"
                        onClick={() => toggleAddModal(false)}
                    >
                        Cancel
                    </Button>
                    <Button
                        disabled={isLoading}
                        onClick={handleAdd${singularPascalCase}}
                    >
                        {isLoading ? 'Adding...' : 'Add ${singularPascalCase}'}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}

export default AddNextComponents
`
}

````


It can generage conly for Input(string) and textArea(string).

Please update those "InputField" """const InputField: React.FC<{
    id: string
    name: string
    label: string
    type?: string
    value: string | number
    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void
}> = ({ id, name, label, type = 'text', value, onChange }) => (
    <div className="grid grid-cols-4 items-center gap-4 pr-1">
        <Label htmlFor={id} className="text-right">
            {label}
        </Label>
        {type === 'textarea' ? (
            <Textarea
                id={id}
                name={name}
                value={value as string}
                onChange={onChange}
                className="col-span-3"
            />
        ) : (
            <Input
                id={id}
                name={name}
                type={type}
                value={value}
                onChange={onChange}
                className="col-span-3"
            />
        )}
    </div>
)
""" 


Please implement those field like : STRING, EMAIL, PASSWORD, PASSCODE, SELECT, DYNAMICSELECT, IMAGES, IMAGE, DESCRIPTION, INTNUMBER, FLOATNUMBER, BOOLEAN, DATE, TIME, DATERANGE, TIMERANGE, COLORPICKER, PHONE, URL, RICHTEXT, AUTOCOMPLETE, RADIOBUTTON, CHECKBOX, MULTICHECKBOX, MULTIOPTIONS


here is example of allData Type that I have to use in my Project 
```
const allDataType: DataTypeItem[] = [
    {
        name: 'STRING',
        mongooseSchema: `STRING: {
            type: String,
        }`,
        ui: '<InputFieldForString />',
        coreCode: InputFieldForStringCoreCode,
    },
    {
        name: 'EMAIL',
        mongooseSchema: `EMAIL: {
            type: String,
            ,
            lowercase: true,
            match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address']
        }`,
        ui: '<InputFieldForEmail />',
        coreCode: InputFieldForEmailCoreCode,
    },
    {
        name: 'PASSWORD',
        mongooseSchema: `PASSWORD: {
            type: String,
            select: false
        }`,
        ui: '<InputFieldForPassword />',
        coreCode: InputFieldForPasswordCoreCode,
    },
    {
        name: 'PASSCODE',
        mongooseSchema: `PASSCODE: {
            type: String,
            select: false
        }`,
        ui: '<InputFieldForPasscode />',
        coreCode: InputFieldForPasscodeCoreCode,
    },
    {
        name: 'SELECT',
        mongooseSchema: `SELECT: {
            type: String,
            enum: ['Option 1', 'Option 2', 'Option 3']
        }`,
        ui: '<SelectField />',
        coreCode: SelectFieldCoreCode,
    },
    {
        name: 'DYNAMICSELECT',
        mongooseSchema: `DYNAMICSELECT: {
            type: Schema.Types.ObjectId,
            ref: 'AnotherModel'
        }`,
        ui: '<DynamicSelectField />',
        coreCode: DynamicSelectFieldCoreCode,
    },
    {
        name: 'IMAGES',
        mongooseSchema: `IMAGES: [{
            type: String
        }]`,
        ui: '<ImageUploadManager />',
        coreCode: ImageUploadManagerCoreCode,
    },
    {
        name: 'IMAGE ',
        mongooseSchema: `IMAGE: {
            type: String
        }`,
        ui: '<ImageUploadFieldSingle />',
        coreCode: ImageUploadFieldSingleCoreCode,
    },
    {
        name: 'DESCRIPTION',
        mongooseSchema: `DESCRIPTION: {
            type: String,
            
        }`,
        ui: '<TextareaFieldForDescription />',
        coreCode: TextareaFieldForDescriptionCoreCode,
    },
    {
        name: 'INTNUMBER',
        mongooseSchema: `INTNUMBER: {
            type: Number,
            validate: {
                validator: Number.isInteger,
                message: '{VALUE} is not an integer value'
            }
        }`,
        ui: '<NumberInputFieldInteger />',
        coreCode: NumberInputFieldIntegerCoreCode,
    },
    {
        name: 'FLOATNUMBER',
        mongooseSchema: `FLOATNUMBER: {
            type: Number
        }`,
        ui: '<NumberInputFieldFloat />',
        coreCode: NumberInputFieldFloatCoreCode,
    },
    {
        name: 'BOOLEAN',
        mongooseSchema: `BOOLEAN: {
            type: Boolean,
            default: false
        }`,
        ui: '<BooleanInputField />',
        coreCode: BooleanInputFieldCoreCode,
    },
    {
        name: 'DATE ',
        mongooseSchema: `DATE: {
            type: Date,
            default: Date.now
        }`,
        ui: '<DateField />',
        coreCode: DateFieldCoreCode,
    },
    {
        name: 'TIME',
        mongooseSchema: `TIME: {
            type: String
        }`,
        ui: '<TimeField />',
        coreCode: TimeFieldCoreCode,
    },
    {
        name: 'DATERANGE',
        mongooseSchema: `DATERANGE: {
            start: { type: Date },
            end: { type: Date }
        }`,
        ui: '<DateRangePickerField />',
        coreCode: DateRangePickerFieldCoreCode,
    },
    {
        name: 'TIMERANGE',
        mongooseSchema: `TIMERANGE: {
            start: { type: String },
            end: { type: String }
        }`,
        ui: '<TimeRangePickerField />',
        coreCode: TimeRangePickerFieldCoreCode,
    },
    {
        name: 'COLORPICKER',
        mongooseSchema: `COLORPICKER: {
            type: String,
            match: [/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Please fill a valid color hex code']
        }`,
        ui: '<ColorPickerField />',
        coreCode: ColorPickerFieldCoreCode,
    },
    {
        name: 'PHONE',
        mongooseSchema: `PHONE: {
            type: String,
            validate: {
                validator: function(v) {
                return /\\d{3}-\\d{3}-\\d{4}/.test(v);
                },
                message: props => \`\${props.value} is not a valid phone number!\`
            }
        }`,
        ui: '<PhoneInputField />',
        coreCode: PhoneInputFieldCoreCode,
    },
    {
        name: 'URL',
        mongooseSchema: `URL: {
            type: String,
            
        }`,
        ui: '<UrlInputField />',
        coreCode: UrlInputFieldCoreCode,
    },
    {
        name: 'RICHTEXT',
        mongooseSchema: `RICHTEXT: {
            type: String
        }`,
        ui: '<RichTextEditorField />',
        coreCode: RichTextEditorFieldCoreCode,
    },
    {
        name: 'AUTOCOMPLETE',
        mongooseSchema: `AUTOCOMPLETE: {
            type: String
        }`,
        ui: '<AutocompleteField />',
        coreCode: AutocompleteFieldCoreCode,
    },
    {
        name: 'RADIOBUTTON',
        mongooseSchema: `RADIOBUTTON: {
            type: String,
            enum: ['Choice A', 'Choice B', 'Choice C']
        }`,
        ui: '<RadioButtonGroupField />',
        coreCode: RadioButtonGroupFieldCoreCode,
    },
    {
        name: 'CHECKBOX',
        mongooseSchema: `CHECKBOX: {
            type: Boolean,
            default: false
        }`,
        ui: '<CheckboxField />',
        coreCode: CheckboxFieldCoreCode,
    },
    {
        name: 'MULTICHECKBOX',
        mongooseSchema: `MULTICHECKBOX: [{
            type: String
        }]`,
        ui: '<MultiCheckboxGroupField />',
        coreCode: MultiCheckboxGroupFieldCoreCode,
    },
    {
        name: 'MULTIOPTIONS',
        mongooseSchema: `MULTIOPTIONS: [{
            type: String
        }]`,
        ui: '<MULTIOPTIONSField />',
        coreCode: MULTIOPTIONSFieldCoreCode,
    },
]```

Here is ui import link. 
```

// Import all UI components
import InputFieldForString from './ui-components/InputFieldForString'
import InputFieldForEmail from './ui-components/InputFieldForEmail'
import InputFieldForPassword from './ui-components/InputFieldForPassword'
import InputFieldForPasscode from './ui-components/InputFieldForPasscode'
import { SelectField } from './ui-components/SelectField'
import DynamicSelectField from './ui-components/DynamicSelectField'
import NumberInputFieldInteger from './ui-components/NumberInputFieldInteger'
import NumberInputFieldFloat from './ui-components/NumberInputFieldFloat'
import { CheckboxField } from './ui-components/CheckboxField'
import { BooleanInputField } from './ui-components/BooleanInputField'
import { DateField } from './ui-components/DateField'
import TimeField from './ui-components/TimeField'
import DateRangePickerField from './ui-components/DateRangePickerField'
import TimeRangePickerField from './ui-components/TimeRangePickerField'
import ColorPickerField from './ui-components/ColorPickerField'
import PhoneInputField from './ui-components/PhoneInputField'
import UrlInputField from './ui-components/UrlInputField'
import TextareaFieldForDescription from './ui-components/TextareaFieldForDescription'
import AutocompleteField from './ui-components/AutocompleteField'
import { RadioButtonGroupField } from './ui-components/RadioButtonGroupField'
import MultiCheckboxGroupField from './ui-components/MultiCheckboxGroupField'
import RichTextEditorField from './ui-components/RichTextEditorField'
import ImageUploadManager from './ui-components/ImageUploadManager'
import ImageUploadFieldSingle from './ui-components/ImageUploadFieldSingle'
import MULTIOPTIONSField from './ui-components/MULTIOPTIONSField'

import { AutocompleteFieldCoreCode } from './core-code/AutocompleteFieldCoreCode'
import { InputFieldForStringCoreCode } from './core-code/InputFieldForStringCoreCode'
import { toast } from 'react-toastify'
import { MultiCheckboxGroupFieldCoreCode } from './core-code/MultiCheckboxGroupFieldCoreCode'
import { CheckboxFieldCoreCode } from './core-code/CheckboxFieldCoreCode'
import { RadioButtonGroupFieldCoreCode } from './core-code/RadioButtonGroupFieldCoreCode'
import { UrlInputFieldCoreCode } from './core-code/UrlInputFieldCoreCode'
import { PhoneInputFieldCoreCode } from './core-code/PhoneInputFieldCoreCode'
import { ColorPickerFieldCoreCode } from './core-code/ColorPickerFieldCoreCode'
import { TimeRangePickerFieldCoreCode } from './core-code/TimeRangePickerFieldCoreCode'
import { DateRangePickerFieldCoreCode } from './core-code/DateRangePickerFieldCoreCode'
import { DateFieldCoreCode } from './core-code/DateFieldCoreCode'
import { BooleanInputFieldCoreCode } from './core-code/BooleanInputFieldCoreCode'
import { NumberInputFieldFloatCoreCode } from './core-code/NumberInputFieldFloatCoreCode'
import { NumberInputFieldIntegerCoreCode } from './core-code/NumberInputFieldIntegerCoreCode'
import { TextareaFieldForDescriptionCoreCode } from './core-code/TextareaFieldForDescriptionCoreCode'
import { DynamicSelectFieldCoreCode } from './core-code/DynamicSelectFieldCoreCode'
import { SelectFieldCoreCode } from './core-code/SelectFieldCoreCode'
import { InputFieldForPasscodeCoreCode } from './core-code/InputFieldForPasscodeCoreCode'
import { InputFieldForPasswordCoreCode } from './core-code/InputFieldForPasswordCoreCode'
import { InputFieldForEmailCoreCode } from './core-code/InputFieldForEmailCoreCode'
import { TimeFieldCoreCode } from './core-code/TimeFieldCoreCode'
import { RichTextEditorFieldCoreCode } from './core-code/RichTextEditorFieldCoreCode'
import { ImageUploadFieldSingleCoreCode } from './core-code/ImageUploadFieldSingleCoreCode'
import { ImageUploadManagerCoreCode } from './core-code/ImageUploadManagerCoreCode'
import { MULTIOPTIONSFieldCoreCode } from './core-code/MULTIOPTIONSFieldCoreCode'

```

Here is all example of all code. 

AutocompleteField.tsx
````
// AutocompleteField.tsx
import { Input } from '@/components/ui/input'
const AutocompleteField = () => {
    return <Input placeholder="Your Name Read Only" readOnly />
}
export default AutocompleteField

````


BooleanInputField.tsx
````
// BooleanInputField.tsx
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'

export function BooleanInputField() {
    return (
        <div className="flex items-center space-x-2">
            <Switch id="airplane-mode" />
            <Label htmlFor="airplane-mode">Airplane Mode</Label>
        </div>
    )
}

````


CheckboxField.tsx
````
// CheckboxField.tsx

'use client'

import { Checkbox } from '@/components/ui/checkbox'
import { Label } from '@/components/ui/label'

export function CheckboxField() {
    return (
        <div className="flex flex-col gap-6">
            <div className="flex items-center gap-3">
                <Checkbox id="terms" />
                <Label htmlFor="terms">Accept terms and conditions</Label>
            </div>
        </div>
    )
}

````


ColorPickerField.tsx
````
// ColorPickerField.tsx

'use client'

import * as React from 'react'
import { Palette } from 'lucide-react'

import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { cn } from '@/lib/utils'

const ColorPickerField = ({
    className,
}: React.HTMLAttributes<HTMLDivElement>) => {
    const [color, setColor] = React.useState('#563d7c') // Initial color

    const handleColorChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setColor(event.target.value)
    }

    return (
        <div className={cn('grid gap-2', className)}>
            <Label htmlFor="color-picker">
                <div className="mb-2 flex items-center">
                    <Palette className="mr-2 h-4 w-4" />
                    <span>Pick a Color</span>
                </div>
            </Label>
            <div className="flex items-center gap-2">
                <Input
                    id="color-picker"
                    type="color"
                    value={color}
                    onChange={handleColorChange}
                    className="h-10 w-14 cursor-pointer p-1"
                />
                <Input
                    type="text"
                    value={color}
                    onChange={handleColorChange}
                    className="w-32"
                    placeholder="#000000"
                />
            </div>
        </div>
    )
}

export default ColorPickerField

````


DateField.tsx
````
// DateField.tsx

'use client'

import * as React from 'react'
import { ChevronDownIcon } from 'lucide-react'
import { format } from 'date-fns'

import { Button } from '@/components/ui/button'
import { Calendar } from '@/components/ui/calendar'
import { Label } from '@/components/ui/label'
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from '@/components/ui/popover'

export function DateField() {
    const [open, setOpen] = React.useState(false)
    const [date, setDate] = React.useState<Date | undefined>(undefined)

    React.useEffect(() => {
        console.log(
            'Current selected date:',
            date ? date.toLocaleDateString() : 'No date selected'
        )
    }, [date])

    return (
        <div className="flex flex-col gap-3">
            <div className="text-red-700">
                This component works without popup
            </div>
            <Label htmlFor="date-field" className="px-1">
                Date of birth
            </Label>
            <Popover open={open} onOpenChange={setOpen}>
                <PopoverTrigger asChild>
                    <Button
                        variant="outline"
                        id="date-field"
                        className="w-48 justify-between font-normal"
                    >
                        {date ? format(date, 'PPP') : 'Select date'}
                        <ChevronDownIcon className="ml-2 h-4 w-4 opacity-50" />
                    </Button>
                </PopoverTrigger>
                <PopoverContent
                    className="w-auto overflow-hidden p-0"
                    align="start"
                >
                    <Calendar
                        mode="single"
                        selected={date}
                        captionLayout="dropdown"
                        fromYear={1900}
                        toYear={new Date().getFullYear()}
                        onSelect={(selectedDate) => {
                            console.log(
                                'Date selected in calendar:',
                                selectedDate
                            )
                            setDate(selectedDate)
                            setOpen(false)
                        }}
                        initialFocus
                    />
                </PopoverContent>
            </Popover>
        </div>
    )
}

````


DateRangePickerField.tsx
````
// DateRangePickerField.tsx

'use client'

import * as React from 'react'
import { CalendarIcon } from 'lucide-react'
import { addDays, format } from 'date-fns'
import { DateRange } from 'react-day-picker'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Calendar } from '@/components/ui/calendar'
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from '@/components/ui/popover'

export default function DateRangePickerField({
    className,
}: React.HTMLAttributes<HTMLDivElement>) {
    const [date, setDate] = React.useState<DateRange | undefined>({
        from: new Date(2025, 8, 20),
        to: addDays(new Date(2025, 8, 20), 4),
    })

    return (
        <div className={cn('grid gap-2', className)}>
            <Popover>
                <PopoverTrigger asChild>
                    <Button
                        id="date"
                        variant={'outline'}
                        className={cn(
                            'w-[300px] justify-start text-left font-normal',
                            !date && 'text-muted-foreground'
                        )}
                    >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {date?.from ? (
                            date.to ? (
                                <>
                                    {format(date.from, 'LLL dd, y')} -{' '}
                                    {format(date.to, 'LLL dd, y')}
                                </>
                            ) : (
                                format(date.from, 'LLL dd, y')
                            )
                        ) : (
                            <span>Pick a date</span>
                        )}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                        initialFocus
                        mode="range"
                        defaultMonth={date?.from}
                        selected={date}
                        onSelect={setDate}
                        numberOfMonths={2}
                    />
                </PopoverContent>
            </Popover>
        </div>
    )
}

````


DynamicSelectField.tsx
````
// DynamicSelectField.tsx

'use client'

import { useEffect, useState } from 'react'
import { X, ChevronDown, Search, Check, Loader2 } from 'lucide-react'

interface IResponseData {
    id: number
    name: string
}

const DynamicSelectField = () => {
    const [availableData, setAvailableData] = useState<string[]>([])
    const [selectedItems, setSelectedItems] = useState<string[]>([])
    const [isLoading, setIsLoading] = useState(true)
    const [error, setError] = useState<string | null>(null)
    const [isOpen, setIsOpen] = useState(false)
    const [searchTerm, setSearchTerm] = useState('')
    const [animatingItems, setAnimatingItems] = useState<Set<string>>(new Set())

    const label = 'Select Team Members'
    const placeholder = 'Search and select members...'
    const apiUrl = 'https://jsonplaceholder.typicode.com/users'
    const readOnly = false

    useEffect(() => {
        const fetchData = async () => {
            setIsLoading(true)
            try {
                const response = await fetch(apiUrl)
                if (!response.ok) {
                    throw new Error(`Failed to fetch data: ${response.status}`)
                }
                const json = await response.json()
                const names = json.map((item: IResponseData) => item.name)
                setAvailableData(names)
                setError(null)
            } catch (err) {
                setError(
                    err instanceof Error ? err.message : 'Failed to fetch data'
                )
                console.error('Error fetching data:', err)
            } finally {
                setIsLoading(false)
            }
        }

        fetchData()
    }, [apiUrl])

    const getFilteredOptions = () => {
        return availableData
            .filter((item) => !selectedItems.includes(item))
            .filter((item) =>
                item.toLowerCase().includes(searchTerm.toLowerCase())
            )
    }

    const handleSelect = (value: string) => {
        if (!readOnly) {
            setAnimatingItems((prev) => new Set(prev).add(value))
            setSelectedItems((prev) => {
                if (prev.includes(value)) return prev
                return [...prev, value]
            })
            setSearchTerm('')
            setIsOpen(false)

            setTimeout(() => {
                setAnimatingItems((prev) => {
                    const newSet = new Set(prev)
                    newSet.delete(value)
                    return newSet
                })
            }, 300)
        }
    }

    const handleRemove = (itemToRemove: string) => {
        if (!readOnly) {
            setAnimatingItems((prev) => new Set(prev).add(itemToRemove))

            setTimeout(() => {
                setSelectedItems((prev) =>
                    prev.filter((item) => item !== itemToRemove)
                )
                setAnimatingItems((prev) => {
                    const newSet = new Set(prev)
                    newSet.delete(itemToRemove)
                    return newSet
                })
            }, 200)
        }
    }

    return (
        <div className="space-y-4 w-full max-w-2xl">
            <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                    {label}
                </label>

                <div className="relative">
                    <div
                        className={`
                            relative min-h-[2.75rem] w-full rounded-lg border border-gray-300 bg-white px-3 py-2 
                            shadow-sm transition-all duration-200 cursor-pointer
                            ${isOpen ? 'border-blue-500 ring-2 ring-blue-500/20' : 'hover:border-gray-400'}
                            ${readOnly ? 'bg-gray-50 cursor-not-allowed' : ''}
                            dark:border-gray-600 dark:bg-gray-900 dark:hover:border-gray-500
                        `}
                        onClick={() =>
                            !readOnly && !isLoading && setIsOpen(!isOpen)
                        }
                    >
                        <div className="flex items-center justify-between">
                            <div className="flex-1">
                                {selectedItems.length === 0 ? (
                                    <span className="text-gray-500 dark:text-gray-400">
                                        {placeholder}
                                    </span>
                                ) : (
                                    <span className="text-sm text-gray-700 dark:text-gray-300">
                                        {selectedItems.length} item
                                        {selectedItems.length !== 1
                                            ? 's'
                                            : ''}{' '}
                                        selected
                                    </span>
                                )}
                            </div>
                            <div className="flex items-center space-x-2">
                                {isLoading && (
                                    <Loader2 className="h-4 w-4 animate-spin text-gray-400" />
                                )}
                                <ChevronDown
                                    className={`h-4 w-4 text-gray-400 transition-transform duration-200 ${
                                        isOpen ? 'rotate-180' : ''
                                    }`}
                                />
                            </div>
                        </div>
                    </div>

                    {isOpen && (
                        <div className="absolute z-50 w-full mt-1 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg animate-in slide-in-from-top-2 duration-200">
                            <div className="p-3 border-b border-gray-200 dark:border-gray-700">
                                <div className="relative">
                                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                                    <input
                                        type="text"
                                        placeholder="Search options..."
                                        value={searchTerm}
                                        onChange={(e) =>
                                            setSearchTerm(e.target.value)
                                        }
                                        className="w-full pl-10 pr-4 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                        autoFocus
                                    />
                                </div>
                            </div>

                            <div className="max-h-64 overflow-y-auto">
                                {error ? (
                                    <div className="p-4 text-center text-red-500 text-sm">
                                        {error}
                                    </div>
                                ) : getFilteredOptions().length === 0 ? (
                                    <div className="p-4 text-center text-gray-500 dark:text-gray-400 text-sm">
                                        {searchTerm
                                            ? 'No matches found'
                                            : 'No options available'}
                                    </div>
                                ) : (
                                    <div className="py-1">
                                        {getFilteredOptions().map(
                                            (item, index) => (
                                                <div
                                                    key={`${item}-${index}`}
                                                    onClick={() =>
                                                        handleSelect(item)
                                                    }
                                                    className="flex items-center justify-between px-3 py-2 text-sm cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-150"
                                                >
                                                    <span className="text-gray-900 dark:text-gray-100">
                                                        {item}
                                                    </span>
                                                    {selectedItems.includes(
                                                        item
                                                    ) && (
                                                        <Check className="h-4 w-4 text-blue-500" />
                                                    )}
                                                </div>
                                            )
                                        )}
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {selectedItems.length > 0 && (
                <div className="space-y-2">
                    <div className="text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide">
                        Selected ({selectedItems.length})
                    </div>
                    <div className="flex flex-wrap gap-2">
                        {selectedItems.map((item, index) => (
                            <div
                                key={`selected-${item}-${index}`}
                                className={`
                                    inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium
                                    bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300
                                    transition-all duration-200 transform
                                    ${animatingItems.has(item) ? 'scale-110 animate-pulse' : 'scale-100'}
                                    animate-in slide-in-from-left-2 duration-300
                                `}
                                style={{
                                    animationDelay: `${index * 50}ms`,
                                    animationFillMode: 'both',
                                }}
                            >
                                <span>{item}</span>
                                {!readOnly && (
                                    <button
                                        type="button"
                                        onClick={() => handleRemove(item)}
                                        className="inline-flex items-center justify-center w-4 h-4 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800/40 transition-colors duration-150"
                                    >
                                        <X className="h-3 w-3" />
                                        <span className="sr-only">
                                            Remove {item}
                                        </span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {isOpen && (
                <div
                    className="fixed inset-0 z-40"
                    onClick={() => setIsOpen(false)}
                />
            )}
        </div>
    )
}

export default DynamicSelectField

````


ImageUploadFieldSingle.tsx
````
// ImageUploadFieldSingle.tsx

import Image from 'next/image'
import { toast } from 'react-toastify'
import { useState, useEffect } from 'react'

import { Input } from '@/components/ui/input'
import { Loader } from 'lucide-react'

const ImageUploadFieldSingle = () => {
    const [loading, setLoading] = useState(false)
    const [profileImageUrl, setProfileImageUrl] = useState<string | null>(null)

    useEffect(() => {
        // Fetch user's current profile image if not provided initially
        // const fetchProfileImage = async () => {
        //   const response = await fetch('/api/user/profile');
        //   const data = await response.json();
        //   if (data.url) {
        //     setProfileImageUrl(data.url);
        //   }
        // };
        // if (!initialImageUrl) {
        //   fetchProfileImage();
        // }
    }, [])
    const onImageUploadSuccess = (newImageUrl: string) => {
        console.log('new Image url :', newImageUrl)
        setProfileImageUrl(newImageUrl)
    }
    const handleImageUpload = async (
        e: React.ChangeEvent<HTMLInputElement>
    ) => {
        const file = e.target.files?.[0]
        if (!file) return

        try {
            setLoading(true)
            const formData = new FormData()
            formData.append('image', file)

            const response = await fetch(
                `https://api.imgbb.com/1/upload?key=${process.env.NEXT_PUBLIC_IMGBB_API_KEY}`,
                {
                    method: 'POST',
                    body: formData,
                }
            )

            const data = await response.json()

            if (data.success) {
                const newImageUrl = data.data.url

                const saveResponse = await fetch('/api/media', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        delete_url: data.data.delete_url,
                        url: newImageUrl,
                        display_url: data.data.display_url,
                    }),
                })

                if (!saveResponse.ok) {
                    throw new Error('Error! Cannot save the profile image.')
                }
                console.log('saveResponse', saveResponse)
                setProfileImageUrl(newImageUrl)
                toast.success('Profile image uploaded successfully!')
                if (onImageUploadSuccess) {
                    onImageUploadSuccess(newImageUrl)
                }
            } else {
                toast.error('Error! Cannot upload the profile image')
            }
        } catch (error) {
            console.error('Error uploading profile image:', error)
            toast.error('Error! Cannot upload the profile image')
        } finally {
            setLoading(false)
        }
    }

    return (
        <div className="flex flex-col items-center justify-center p-4 border rounded-lg shadow-sm w-full max-w-sm mx-auto">
            <h3 className="text-xl font-semibold mb-4">Profile Image</h3>
            <div className="relative w-32 h-32 rounded-full overflow-hidden border-2 border-slate-300 flex items-center justify-center bg-gray-100 mb-4">
                {profileImageUrl ? (
                    <Image
                        src={profileImageUrl}
                        alt="Profile"
                        fill
                        className="object-cover "
                    />
                ) : (
                    <span className="text-gray-500 text-sm">No Image</span>
                )}
            </div>
            <div className="w-full">
                <Input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    disabled={loading}
                    className="mb-3"
                />
                {loading && (
                    <div className="flex items-center justify-center gap-2 text-blue-500">
                        <Loader className="mr-2 h-4 w-4 animate-spin" />
                        Uploading...
                    </div>
                )}
                {!loading && !profileImageUrl && (
                    <p className="text-sm text-gray-500 mt-2 text-center">
                        Upload your profile picture.
                    </p>
                )}
            </div>
        </div>
    )
}

export default ImageUploadFieldSingle

````


ImageUploadManager.tsx
````
// ImageUploadManager.tsx

'use client'

import Image from 'next/image'
import { Plus, X } from 'lucide-react'
import { toast } from 'react-toastify'
import { useEffect, useState } from 'react'

import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from '@/components/ui/dialog'

const InternalImageDialog = ({
    handleAddImages,
}: {
    handleAddImages: (newImage: string) => void
}) => {
    const [allAvailableImages, setAllAvailableImages] = useState<string[]>([])
    const [loading, setLoading] = useState(false)
    const [showUploadModal, setShowUploadModal] = useState(false)
    const [selectImg, setSelectImg] = useState('')

    const handleImageUpload = async (
        e: React.ChangeEvent<HTMLInputElement>
    ) => {
        const file = e.target.files?.[0]
        if (!file) return

        try {
            setLoading(true)
            const formData = new FormData()
            formData.append('image', file)

            const response = await fetch(
                `https://api.imgbb.com/1/upload?key=${process.env.NEXT_PUBLIC_IMGBB_API_KEY}`,
                {
                    method: 'POST',
                    body: formData,
                }
            )

            const data = await response.json()
            if (data.success) {
                const saveResponse = await fetch('/api/media', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        delete_url: data.data.delete_url,
                        url: data.data.url,
                        display_url: data.data.display_url,
                    }),
                })

                if (!saveResponse.ok) {
                    throw new Error('Error! Cannot save the image.')
                }
                setAllAvailableImages([data?.data?.url, ...allAvailableImages])
                toast.success('Image uploaded successfully!')
                setShowUploadModal(false)
            } else {
                toast.error('Error! Cannot upload the image')
            }
        } catch (error) {
            console.error('Error uploading image:', error)
            toast.error('Error! Cannot upload the image')
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        const fetchImages = async () => {
            const response = await fetch('/api/media')
            const data = await response.json()

            const lstImage: string[] = data?.data.map(
                (i: { url: string }) => i.url
            )
            setAllAvailableImages(lstImage)
        }
        fetchImages()
    }, [])

    const handleSelect = (id: string) => {
        if (selectImg === id) {
            setSelectImg('')
        } else {
            handleAddImages(id)
            setSelectImg(id)
        }
    }

    return (
        <ScrollArea className="w-full h-[60vh] p-1 pr-2 border-1 border-slate-500">
            <main className="w-full min-h-[60vh] flex flex-col">
                <div className="flex justify-between items-center border-b border-slate-200 mb-2">
                    <h1 className="text-xl w-full">
                        Not here! Upload a new one
                    </h1>
                    <Button
                        className="border-slate-500 hover:border-slate-600 border-1 cursor-pointer"
                        onClick={() => setShowUploadModal(true)}
                    >
                        Upload
                    </Button>
                </div>
                {showUploadModal ? (
                    <div className="fixed inset-0 backdrop-blur-sm bg-opacity-50 flex items-center justify-center z-50">
                        <div className="bg-white p-4 rounded-lg w-96">
                            <h3 className="text-lg font-semibold mb-4">
                                Upload
                            </h3>
                            <Input
                                type="file"
                                accept="image/*"
                                onChange={handleImageUpload}
                                disabled={loading}
                            />
                            {loading && <p className="mt-2">Uploading...</p>}
                            <div className="flex justify-end gap-2 mt-4">
                                <Button
                                    className="cursor-pointer"
                                    variant="outline"
                                    onClick={() => setShowUploadModal(false)}
                                >
                                    Cancel
                                </Button>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div>
                        {allAvailableImages.length > 0 ? (
                            <div className="w-full grid grid-cols-1 md:grid-cols-3 gap-1">
                                {allAvailableImages.map((i, index) => (
                                    <div
                                        onClick={() => handleSelect(i)}
                                        key={index + i}
                                        className={`relative w-full h-[150px] border-1 shadow-xl hover:shadow-2xl cursor-pointer hover:border-slate-600 flex items-center justify-center rounded-lg overflow-hidden ${
                                            selectImg === i
                                                ? 'border-blue-500'
                                                : 'border-slate-300'
                                        }`}
                                    >
                                        <Image
                                            src={i}
                                            fill
                                            alt="Media"
                                            objectFit="cover"
                                        />
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="flex flex-col w-full items-center justify-center mt-3">
                                <p>Ops! there is no Image</p>
                            </div>
                        )}
                    </div>
                )}
            </main>
        </ScrollArea>
    )
}

export default function ImageUploadManager() {
    const [allMyImages, setAllMyImages] = useState<string[]>([])

    const handleAddImages = (newSelectImage: string) => {
        if (!allMyImages.includes(newSelectImage)) {
            setAllMyImages((prevImages) => [newSelectImage, ...prevImages])
        } else {
            toast.info('Image already added!')
        }
    }

    const handleRemoveImages = (imageToRemove: string) => {
        setAllMyImages((prevImages) =>
            prevImages.filter((i) => i !== imageToRemove)
        )
    }

    const UploadButton = () => {
        return (
            <div>
                <Dialog>
                    <DialogTrigger asChild>
                        <Button className="border-slate-500 text-slate-600 hover:border-slate-600 border-1 cursor-pointer flex items-center justify-center px-2 rounded-lg text-sm py-1">
                            <Plus className="w-4 h-4 mr-1" /> Add Image
                        </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-[80vw] md:max-w-[600px] h-[70vh] p-0">
                        <DialogHeader className="p-4 pb-0">
                            <DialogTitle>Please Select an Image</DialogTitle>
                        </DialogHeader>
                        <InternalImageDialog
                            handleAddImages={handleAddImages}
                        />
                    </DialogContent>
                </Dialog>
            </div>
        )
    }

    return (
        <div className="w-full flex flex-col gap-2">
            <div className="w-full flex items-center justify-between">
                <h2>Images</h2>
                <UploadButton />
            </div>
            <div className="w-full min-h-[10vh] rounded-lg flex items-center justify-center p-2 border border-dashed border-gray-300">
                {allMyImages.length > 0 ? (
                    <div className="w-full grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-2">
                        {allMyImages.map((i, index) => (
                            <div
                                key={index + i}
                                className={`relative w-full h-[150px] border-1 border-slate-300 shadow-xl hover:shadow-2xl flex items-center justify-center rounded-lg overflow-hidden`}
                            >
                                <Image
                                    src={i}
                                    alt="Media"
                                    objectFit="cover"
                                    fill
                                />
                                <div
                                    onClick={() => handleRemoveImages(i)}
                                    className="absolute top-1 right-1 bg-rose-500 w-6 h-6 flex items-center justify-center rounded-full cursor-pointer z-10"
                                >
                                    <X className="text-white h-4 w-4" />
                                </div>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="flex flex-col w-full items-center justify-center h-full text-gray-500">
                        <p>
                            No images selected yet. Click &quot;Add Image&quot;
                            to begin!
                        </p>
                    </div>
                )}
            </div>
        </div>
    )
}

````


InputFieldForEmail.tsx
````
// InputFieldForEmail.tsx

import { Input } from '@/components/ui/input'

const InputFieldForEmail = () => {
    return <Input placeholder="example@gmail.com" />
}
export default InputFieldForEmail

````


InputFieldForPasscode.tsx
````
// InputFieldForPasscode.tsx

import { Input } from '@/components/ui/input'
import { useState } from 'react'
import { Eye, EyeOff } from 'lucide-react'

const InputFieldForPasscode = () => {
    const [showPasscode, setShowPasscode] = useState(false)
    const [passcode, setPasscode] = useState('')
    const [error, setError] = useState('')

    const togglePasscodeVisibility = () => {
        setShowPasscode(!showPasscode)
    }

    const handlePasscodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value
        const numericValue = value.replace(/[^0-9]/g, '')
        setPasscode(numericValue)

        if (numericValue.length > 0 && numericValue.length < 6) {
            setError('Passcode must be exactly 6 digits.')
        } else {
            setError('')
        }
    }

    return (
        <div>
            <small>Only number 6 digits allowed</small>
            <div className="relative">
                <Input
                    placeholder="******"
                    type={showPasscode ? 'text' : 'password'}
                    value={passcode}
                    onChange={handlePasscodeChange}
                    maxLength={6}
                    inputMode="numeric"
                    pattern="\d{6}"
                    className={`pr-10 ${error ? 'border-red-500 focus-visible:ring-red-500' : ''}`}
                />
                <div
                    className="absolute inset-y-0 right-0 flex cursor-pointer items-center pr-3"
                    onClick={togglePasscodeVisibility}
                >
                    {showPasscode ? (
                        <EyeOff className="h-5 w-5 text-gray-400" />
                    ) : (
                        <Eye className="h-5 w-5 text-gray-400" />
                    )}
                </div>
            </div>
            {error && (
                <div className="mt-2 rounded-md bg-red-100 p-3 text-sm text-red-700">
                    <p>{error}</p>
                </div>
            )}
        </div>
    )
}

export default InputFieldForPasscode

````


InputFieldForPassword.tsx
````
// InputFieldForPassword.tsx

'use client'

import { Input } from '@/components/ui/input'
import { useState } from 'react'
import { Eye, EyeOff } from 'lucide-react'

const InputFieldForPassword = () => {
    const [showPassword, setShowPassword] = useState(false)
    const [password, setPassword] = useState('')
    const [error, setError] = useState('')

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword)
    }

    const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value
        setPassword(value)

        if (value.length > 0 && (value.length < 6 || value.length > 12)) {
            setError('Password must be between 6 and 12 characters.')
        } else {
            setError('')
        }
    }

    return (
        <div>
            <div className="relative">
                <Input
                    placeholder="********"
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    onChange={handlePasswordChange}
                    maxLength={12}
                    minLength={6}
                    className={`pr-10 ${error ? 'border-red-500 focus-visible:ring-red-500' : ''}`}
                />
                <div
                    className="absolute inset-y-0 right-0 flex cursor-pointer items-center pr-3"
                    onClick={togglePasswordVisibility}
                >
                    {showPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400" />
                    ) : (
                        <Eye className="h-5 w-5 text-gray-400" />
                    )}
                </div>
            </div>
            {error && (
                <div className="mt-2 rounded-md bg-red-100 p-3 text-sm text-red-700">
                    <p>{error}</p>
                </div>
            )}
        </div>
    )
}

export default InputFieldForPassword

````


InputFieldForString.tsx
````
// InputFieldForString.tsx

import { Input } from '@/components/ui/input'
const InputFieldForString = () => {
    return <Input placeholder="Your Name" />
}
export default InputFieldForString

````


MultiCheckboxGroupField.tsx
````
// MultiCheckboxGroupField.tsx

import { Checkbox } from '@/components/ui/checkbox'
import { Label } from '@/components/ui/label'

const MultiCheckboxGroupField = () => {
    return (
        <div className="flex gap-4 flex-col">
            <div className="flex flex-col gap-6">
                <div className="flex items-center gap-3">
                    <Checkbox id="terms" />
                    <Label htmlFor="terms">Accept terms and conditions</Label>
                </div>
            </div>
            <div className="flex flex-col gap-6">
                <div className="flex items-center gap-3">
                    <Checkbox id="terms" />
                    <Label htmlFor="terms">Accept terms and conditions</Label>
                </div>
            </div>
            <div className="flex flex-col gap-6">
                <div className="flex items-center gap-3">
                    <Checkbox id="terms" />
                    <Label htmlFor="terms">Accept terms and conditions</Label>
                </div>
            </div>
        </div>
    )
}
export default MultiCheckboxGroupField

````


MULTIOPTIONSField.tsx
````
// MULTIOPTIONSField.tsx

'use client'

import React, { useState, useMemo, useRef, useEffect } from 'react'
import { Input } from '@/components/ui/input'
import { XIcon, PlusCircleIcon } from 'lucide-react'

const MULTIOPTIONSField: React.FC = () => {
    const [allData, setAllData] = useState<string[]>([
        'Option 1',
        'Option 2',
        'Option 3',
        'Option 4',
        'Option 5',
        'Option 6',
    ])

    const [selectedData, setSelectedData] = useState<string[]>([])

    const [inputValue, setInputValue] = useState('')

    const [isDropdownOpen, setIsDropdownOpen] = useState(false)

    const wrapperRef = useRef<HTMLDivElement>(null)
    const filteredSuggestions = useMemo(() => {
        if (!inputValue) {
            return allData.filter((item) => !selectedData.includes(item))
        }
        return allData.filter(
            (item) =>
                !selectedData.includes(item) &&
                item.toLowerCase().includes(inputValue.toLowerCase())
        )
    }, [inputValue, allData, selectedData])

    useEffect(() => {
        function handleClickOutside(event: MouseEvent) {
            if (
                wrapperRef.current &&
                !wrapperRef.current.contains(event.target as Node)
            ) {
                setIsDropdownOpen(false)
            }
        }
        document.addEventListener('mousedown', handleClickOutside)
        return () => {
            document.removeEventListener('mousedown', handleClickOutside)
        }
    }, [wrapperRef])

    const handleSelect = (item: string) => {
        setSelectedData((prevSelected) => [...prevSelected, item])
        setInputValue('')
        setIsDropdownOpen(false)
    }

    const handleRemove = (itemToRemove: string) => {
        setSelectedData((prevSelected) =>
            prevSelected.filter((item) => item !== itemToRemove)
        )
    }

    const handleAddNew = () => {
        const newItem = inputValue.trim()
        if (
            newItem &&
            !allData.find(
                (item) => item.toLowerCase() === newItem.toLowerCase()
            )
        ) {
            setAllData((prevAll) => [...prevAll, newItem])

            setSelectedData((prevSelected) => [...prevSelected, newItem])
            setInputValue('')
            setIsDropdownOpen(false)
        }
    }

    return (
        <div className="relative w-full max-w-lg" ref={wrapperRef}>
            <div className="flex flex-wrap items-center gap-2 p-2 border rounded-md bg-background min-h-[46px]">
                {selectedData.map((item) => (
                    <div
                        key={item}
                        className="flex items-center gap-1.5 bg-secondary text-secondary-foreground rounded-full px-3 py-1 text-sm animate-in fade-in-0"
                    >
                        <span>{item}</span>
                        <button
                            onClick={() => handleRemove(item)}
                            className="rounded-full hover:bg-muted-foreground/20 transition-colors"
                            aria-label={`Remove ${item}`}
                        >
                            <XIcon className="w-4 h-4" />
                        </button>
                    </div>
                ))}
                <Input
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onFocus={() => setIsDropdownOpen(true)}
                    placeholder={
                        selectedData.length === 0 ? 'Search or add tags...' : ''
                    }
                />
            </div>

            {isDropdownOpen && (
                <div className="absolute z-10 w-full mt-2 bg-card border rounded-md shadow-lg animate-in fade-in-0 zoom-in-95">
                    <ul className="py-1 max-h-60 overflow-y-auto">
                        {filteredSuggestions.length > 0
                            ? filteredSuggestions.map((item) => (
                                  <li
                                      key={item}
                                      onClick={() => handleSelect(item)}
                                      className="px-3 py-2 text-sm cursor-pointer hover:bg-accent"
                                  >
                                      {item}
                                  </li>
                              ))
                            : inputValue.trim() && (
                                  <li className="px-3 py-2 text-sm">
                                      <button
                                          onClick={handleAddNew}
                                          className="flex items-center justify-between w-full text-left hover:text-primary transition-colors"
                                      >
                                          <span>
                                              Add &quot;{inputValue}&quot;
                                          </span>
                                          <PlusCircleIcon className="w-4 h-4 text-primary" />
                                      </button>
                                  </li>
                              )}
                        {filteredSuggestions.length === 0 &&
                            !inputValue.trim() && (
                                <li className="px-3 py-2 text-sm text-center text-muted-foreground">
                                    No more options available.
                                </li>
                            )}
                    </ul>
                </div>
            )}
        </div>
    )
}

export default MULTIOPTIONSField

````


NumberInputFieldFloat.tsx
````
// NumberInputFieldFloat.tsx

import { Input } from '@/components/ui/input'
import React, { useState } from 'react'

const NumberInputFieldFloat = () => {
    const min = 0
    const max = 100000
    const step = 0.01

    const [quantity, setQuantity] = useState<number | undefined>(1.0)

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const rawValue = e.target.value
        const parsedValue = parseFloat(rawValue)

        if (isNaN(parsedValue) || rawValue.trim() === '') {
            setQuantity(undefined)
        } else {
            let finalValue = parsedValue

            if (min !== undefined && finalValue < min) {
                finalValue = min
            }
            if (max !== undefined && finalValue > max) {
                finalValue = max
            }
            setQuantity(finalValue)
        }
    }

    const displayValue =
        quantity !== undefined && quantity !== null ? String(quantity) : ''

    return (
        <Input
            placeholder="Quantity"
            type="number"
            inputMode="decimal"
            pattern="[0-9]*\.?[0-9]*"
            value={displayValue}
            onChange={handleChange}
            onKeyDown={(e) => {
                if (
                    e.key === 'e' ||
                    (e.key === '-' &&
                        (displayValue.includes('-') ||
                            e.currentTarget.selectionStart !== 0))
                ) {
                    e.preventDefault()
                }
            }}
            min={min}
            max={max}
            step={step}
        />
    )
}

export default NumberInputFieldFloat

````


NumberInputFieldInteger.tsx
````
// NumberInputFieldInteger.tsx

import { Input } from '@/components/ui/input'
import React, { useState } from 'react'

const NumberInputFieldInteger = () => {
    const min = 0
    const max = 100000
    const [quantity, setQuantity] = useState<number | undefined>(1)
    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const rawValue = e.target.value
        const parsedValue = parseInt(rawValue, 10)

        if (isNaN(parsedValue) || rawValue.trim() === '') {
            setQuantity?.(undefined)
        } else {
            let finalValue = parsedValue

            if (min !== undefined && finalValue < min) {
                finalValue = min
            }
            if (max !== undefined && finalValue > max) {
                finalValue = max
            }

            setQuantity?.(finalValue)
        }
    }

    const displayValue =
        quantity !== undefined && quantity !== null
            ? String(Math.floor(quantity))
            : ''
    return (
        <Input
            placeholder="Quantity"
            type="number"
            inputMode="numeric"
            pattern="[0-9]*"
            value={displayValue}
            onChange={handleChange}
            onKeyDown={(e) => {
                if (e.key === '.' || e.key === 'e' || e.key === '-') {
                    e.preventDefault()
                }
            }}
            min={min}
            max={max}
        />
    )
}

export default NumberInputFieldInteger

````


PhoneInputField.tsx
````
// PhoneInputField.tsx

'use client'

import * as React from 'react'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { cn } from '@/lib/utils'

const PhoneInputField = ({
    className,
}: React.HTMLAttributes<HTMLDivElement>) => {
    const [phoneNumber, setPhoneNumber] = React.useState('')
    const countryCode = '+880'

    const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value

        let numericValue = value.replace(/\D/g, '')

        if (numericValue.startsWith('0')) {
            numericValue = numericValue.substring(1)
        }
        setPhoneNumber(numericValue)
    }

    return (
        <div className={cn('grid gap-2', className)}>
            <Label htmlFor="phone">Phone Number</Label>
            <div className="relative flex items-center">
                <span className="absolute left-3 text-muted-foreground">
                    {countryCode}
                </span>
                <Input
                    id="phone"
                    type="tel"
                    placeholder="1711223344"
                    value={phoneNumber}
                    onChange={handlePhoneChange}
                    className="pl-14"
                />
            </div>
        </div>
    )
}

export default PhoneInputField

````


RadioButtonGroupField.tsx
````
// RadioButtonGroupField.tsx

import { Label } from '@/components/ui/label'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'

export function RadioButtonGroupField() {
    return (
        <RadioGroup defaultValue="comfortable">
            <div className="flex items-center gap-3">
                <RadioGroupItem value="default" id="r1" />
                <Label htmlFor="r1">Default</Label>
            </div>
            <div className="flex items-center gap-3">
                <RadioGroupItem value="comfortable" id="r2" />
                <Label htmlFor="r2">Comfortable</Label>
            </div>
            <div className="flex items-center gap-3">
                <RadioGroupItem value="compact" id="r3" />
                <Label htmlFor="r3">Compact</Label>
            </div>
        </RadioGroup>
    )
}

````


RichTextEditorField.tsx
````
// RichTextEditorField.tsx

'use client'

import React from 'react'

import {
    AlignCenter,
    AlignLeft,
    AlignRight,
    Bold,
    Heading1,
    Heading2,
    Heading3,
    Heading4,
    Heading5,
    Heading6,
    Highlighter,
    Italic,
    List,
    ListOrdered,
    Strikethrough,
} from 'lucide-react'
import { Toggle } from '@/components/ui/toggle'

import StarterKit from '@tiptap/starter-kit'
import Highlight from '@tiptap/extension-highlight'
import TextAlign from '@tiptap/extension-text-align'
import { EditorContent, useEditor, Editor } from '@tiptap/react'

function EditorMenuBar({ editor }: { editor: Editor | null }) {
    if (!editor) {
        return null
    }

    const Options = [
        {
            icon: <Heading1 className="size-4" />,
            onClick: () =>
                editor.chain().focus().toggleHeading({ level: 1 }).run(),
            preesed: editor.isActive('heading', { level: 1 }),
        },
        {
            icon: <Heading2 className="size-4" />,
            onClick: () =>
                editor.chain().focus().toggleHeading({ level: 2 }).run(),
            preesed: editor.isActive('heading', { level: 2 }),
        },
        {
            icon: <Heading3 className="size-4" />,
            onClick: () =>
                editor.chain().focus().toggleHeading({ level: 3 }).run(),
            preesed: editor.isActive('heading', { level: 3 }),
        },
        {
            icon: <Heading4 className="size-4" />,
            onClick: () =>
                editor.chain().focus().toggleHeading({ level: 4 }).run(),
            preesed: editor.isActive('heading', { level: 4 }),
        },
        {
            icon: <Heading5 className="size-4" />,
            onClick: () =>
                editor.chain().focus().toggleHeading({ level: 5 }).run(),
            preesed: editor.isActive('heading', { level: 5 }),
        },
        {
            icon: <Heading6 className="size-4" />,
            onClick: () =>
                editor.chain().focus().toggleHeading({ level: 6 }).run(),
            preesed: editor.isActive('heading', { level: 6 }),
        },
        {
            icon: <Bold className="size-4" />,
            onClick: () => editor.chain().focus().toggleBold().run(),
            preesed: editor.isActive('bold'),
        },
        {
            icon: <Italic className="size-4" />,
            onClick: () => editor.chain().focus().toggleItalic().run(),
            preesed: editor.isActive('italic'),
        },
        {
            icon: <Strikethrough className="size-4" />,
            onClick: () => editor.chain().focus().toggleStrike().run(),
            preesed: editor.isActive('strike'),
        },
        {
            icon: <AlignLeft className="size-4" />,
            onClick: () => editor.chain().focus().setTextAlign('left').run(),
            preesed: editor.isActive({ textAlign: 'left' }),
        },
        {
            icon: <AlignCenter className="size-4" />,
            onClick: () => editor.chain().focus().setTextAlign('center').run(),
            preesed: editor.isActive({ textAlign: 'center' }),
        },
        {
            icon: <AlignRight className="size-4" />,
            onClick: () => editor.chain().focus().setTextAlign('right').run(),
            preesed: editor.isActive({ textAlign: 'right' }),
        },
        {
            icon: <List className="size-4" />,
            onClick: () => editor.chain().focus().toggleBulletList().run(),
            preesed: editor.isActive('bulletList'),
        },
        {
            icon: <ListOrdered className="size-4" />,
            onClick: () => editor.chain().focus().toggleOrderedList().run(),
            preesed: editor.isActive('orderedList'),
        },
        {
            icon: <Highlighter className="size-4" />,
            onClick: () => editor.chain().focus().toggleHighlight().run(),
            preesed: editor.isActive('highlight'),
        },
    ]

    return (
        <div className="border rounded-md p-1 mb-1 space-x-2 z-50 space-y-1">
            {Options.map((option, index) => (
                <Toggle
                    key={index}
                    pressed={option.preesed}
                    onPressedChange={option.onClick}
                    className={` border-1 rounded-md cursor-pointer ${option.preesed ? 'border-slate-500' : 'border-slate-50'}`}
                >
                    {option.icon}
                </Toggle>
            ))}
        </div>
    )
}

export default function RichTextEditorField() {
    const content: string = ''
    const onChange = (content: string) => {
        console.log('content : ', content)
    }
    const editor = useEditor({
        extensions: [
            StarterKit.configure({
                bulletList: {
                    HTMLAttributes: {
                        class: 'list-disc ml-3',
                    },
                },
                orderedList: {
                    HTMLAttributes: {
                        class: 'list-decimal ml-3',
                    },
                },
                heading: {
                    levels: [1, 2, 3, 4, 5, 6],
                    HTMLAttributes: {},
                },
            }),
            TextAlign.configure({
                types: ['heading', 'paragraph'],
            }),
            Highlight,
        ],
        content: content,
        editorProps: {
            attributes: {
                class: 'min-h-[156px] border py-2 px-3 prose prose-headings:font-bold prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg',
            },
        },
        onUpdate: ({ editor }) => {
            onChange(editor.getHTML())
        },
        immediatelyRender: false,
    })

    return (
        <div className="tiptap-editor">
            <EditorMenuBar editor={editor} />
            <EditorContent editor={editor} />
        </div>
    )
}

````


SelectField.tsx
````
// SelectField.tsx

import * as React from 'react'

import {
    Select,
    SelectContent,
    SelectGroup,
    SelectItem,
    SelectLabel,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select'

export function SelectField() {
    return (
        <Select>
            <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select a fruit" />
            </SelectTrigger>
            <SelectContent>
                <SelectGroup>
                    <SelectLabel>Fruits</SelectLabel>
                    <SelectItem value="apple">Apple</SelectItem>
                    <SelectItem value="banana">Banana</SelectItem>
                    <SelectItem value="blueberry">Blueberry</SelectItem>
                    <SelectItem value="grapes">Grapes</SelectItem>
                    <SelectItem value="pineapple">Pineapple</SelectItem>
                </SelectGroup>
            </SelectContent>
        </Select>
    )
}

````


TextareaFieldForDescription.tsx
````
// TextareaFieldForDescription.tsx

'use client'

import * as React from 'react'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { cn } from '@/lib/utils'

const TextareaFieldForDescription = ({
    className,
}: React.HTMLAttributes<HTMLDivElement>) => {
    const [description, setDescription] = React.useState('')

    const handleDescriptionChange = (
        e: React.ChangeEvent<HTMLTextAreaElement>
    ) => {
        setDescription(e.target.value)
    }

    return (
        <div className={cn('grid w-full gap-2', className)}>
            <Label htmlFor="description">Description</Label>
            <Textarea
                id="description"
                placeholder="Type your description here."
                value={description}
                onChange={handleDescriptionChange}
            />
        </div>
    )
}

export default TextareaFieldForDescription

````


TimeField.tsx
````
// TimeField.tsx

'use client'

import * as React from 'react'
import { Clock } from 'lucide-react'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from '@/components/ui/popover'
import { ScrollArea } from '@/components/ui/scroll-area'

const TimeField = () => {
    const [isOpen, setIsOpen] = React.useState(false)
    const [selectedDate, setSelectedDate] = React.useState<Date | undefined>()

    const hourScrollRef = React.useRef<HTMLDivElement>(null)
    const minuteScrollRef = React.useRef<HTMLDivElement>(null)

    const formatTime = (date: Date | undefined): string => {
        if (!date) return ''

        let hours = date.getHours()
        const minutes = date.getMinutes()
        const ampm = hours >= 12 ? 'PM' : 'AM'
        hours = hours % 12
        hours = hours === 0 ? 12 : hours
        return `${hours.toString().padStart(2, '0')}:${minutes
            .toString()
            .padStart(2, '0')} ${ampm}`
    }

    const handleHourSelect = (hour: number) => {
        const newDate = selectedDate ? new Date(selectedDate) : new Date()
        newDate.setHours(hour, newDate.getMinutes(), 0, 0)
        setSelectedDate(newDate)
    }

    const handleMinuteSelect = (minute: number) => {
        const newDate = selectedDate ? new Date(selectedDate) : new Date()
        newDate.setMinutes(minute, 0, 0)
        setSelectedDate(newDate)
    }

    React.useEffect(() => {
        if (isOpen && selectedDate) {
            const currentHour = selectedDate.getHours()
            const currentMinute = selectedDate.getMinutes()

            if (hourScrollRef.current) {
                const hourElement = hourScrollRef.current.querySelector(
                    `[data-hour="${currentHour}"]`
                )
                if (hourElement) {
                    hourElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                    })
                }
            }

            if (minuteScrollRef.current) {
                const minuteElement = minuteScrollRef.current.querySelector(
                    `[data-minute="${currentMinute}"]`
                )
                if (minuteElement) {
                    minuteElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                    })
                }
            }
        }
    }, [isOpen, selectedDate])

    const hours = Array.from({ length: 24 }, (_, i) => i)
    const minutes = Array.from({ length: 60 }, (_, i) => i)

    const currentHour = selectedDate?.getHours()
    const currentMinute = selectedDate?.getMinutes()

    return (
        <div className={cn('relative w-fit')}>
            <div className="text-red-700">
                This component works without popup
            </div>
            <Popover open={isOpen} onOpenChange={setIsOpen}>
                <PopoverTrigger asChild>
                    <Button
                        variant="outline"
                        className={cn(
                            'w-full justify-start text-left font-normal',
                            !selectedDate && 'text-muted-foreground'
                        )}
                        aria-label={
                            selectedDate
                                ? `Selected time: ${formatTime(selectedDate)}`
                                : 'Pick a time'
                        }
                    >
                        <Clock className="mr-2 h-4 w-4" />
                        {selectedDate ? (
                            formatTime(selectedDate)
                        ) : (
                            <span>Pick a time</span>
                        )}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0 z-50">
                    <div className="flex max-h-48">
                        <ScrollArea
                            className="h-48 w-20 border-r"
                            ref={hourScrollRef}
                        >
                            <div className="flex flex-col p-1">
                                {hours.map((hour) => {
                                    const ampm = hour >= 12 ? 'PM' : 'AM'
                                    let displayHour = hour % 12
                                    displayHour =
                                        displayHour === 0 ? 12 : displayHour

                                    const isSelected = currentHour === hour

                                    return (
                                        <Button
                                            key={hour}
                                            variant="ghost"
                                            className={cn(
                                                'flex items-center justify-center text-sm p-2 w-full',
                                                isSelected &&
                                                    'bg-accent text-accent-foreground hover:bg-accent',
                                                'hover:bg-accent/50'
                                            )}
                                            onClick={() =>
                                                handleHourSelect(hour)
                                            }
                                            data-hour={hour}
                                        >
                                            {displayHour
                                                .toString()
                                                .padStart(2, '0')}{' '}
                                            <span className="text-xs ml-1">
                                                {ampm}
                                            </span>
                                        </Button>
                                    )
                                })}
                            </div>
                        </ScrollArea>

                        <ScrollArea className="h-48 w-20" ref={minuteScrollRef}>
                            <div className="flex flex-col p-1">
                                {minutes.map((minute) => {
                                    const isSelected = currentMinute === minute
                                    return (
                                        <Button
                                            key={minute}
                                            variant="ghost"
                                            className={cn(
                                                'flex items-center justify-center text-sm p-2 w-full',
                                                isSelected &&
                                                    'bg-accent text-accent-foreground hover:bg-accent',
                                                'hover:bg-accent/50'
                                            )}
                                            onClick={() =>
                                                handleMinuteSelect(minute)
                                            }
                                            data-minute={minute}
                                        >
                                            {minute.toString().padStart(2, '0')}
                                        </Button>
                                    )
                                })}
                            </div>
                        </ScrollArea>
                    </div>
                </PopoverContent>
            </Popover>
        </div>
    )
}

export default TimeField

````


TimeRangePickerField.tsx
````
// TimeRangePickerField.tsx

'use client'

import * as React from 'react'
import { Clock } from 'lucide-react'

import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import { cn } from '@/lib/utils'

const TimeRangePickerField = ({
    className,
}: React.HTMLAttributes<HTMLDivElement>) => {
    const [startTime, setStartTime] = React.useState('09:00')
    const [endTime, setEndTime] = React.useState('17:00')

    const handleStartTimeChange = (
        event: React.ChangeEvent<HTMLInputElement>
    ) => {
        setStartTime(event.target.value)
    }

    const handleEndTimeChange = (
        event: React.ChangeEvent<HTMLInputElement>
    ) => {
        setEndTime(event.target.value)
    }

    return (
        <div className={cn('grid gap-2', className)}>
            <Label>
                <div className="mb-2 flex items-center">
                    <Clock className="mr-2 h-4 w-4" />
                    <span>Time Range</span>
                </div>
                <div className="flex items-center gap-2">
                    <Input
                        type="time"
                        value={startTime}
                        onChange={handleStartTimeChange}
                        className="w-full"
                    />
                    <span>-</span>
                    <Input
                        type="time"
                        value={endTime}
                        onChange={handleEndTimeChange}
                        className="w-full"
                    />
                </div>
            </Label>
        </div>
    )
}

export default TimeRangePickerField

````


UrlInputField.tsx
````
// UrlInputField.tsx

'use client'

import * as React from 'react'
import { Link } from 'lucide-react'

import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { cn } from '@/lib/utils'

const UrlInputField = ({ className }: React.HTMLAttributes<HTMLDivElement>) => {
    const [url, setUrl] = React.useState('')

    const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setUrl(e.target.value)
    }

    return (
        <div className={cn('grid gap-2', className)}>
            <Label htmlFor="url-input">Website URL</Label>
            <div className="relative flex items-center">
                <Link className="absolute left-3 h-4 w-4 text-muted-foreground" />
                <Input
                    id="url-input"
                    type="url"
                    placeholder="https://example.com"
                    value={url}
                    onChange={handleUrlChange}
                    className="pl-10"
                />
            </div>
        </div>
    )
}

export default UrlInputField

````



